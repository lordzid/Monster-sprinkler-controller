##########################################################
# RAM: 77% 
# Flash: 51% 
# LCD light          GPIO12
# Clock         sda: GPIO01 scl: GPIO02
# LSD and Relay sda: GPIO10 scl: GPIO11
# rtttl              GPIO17 
# RGB                GPIO48
# Button            menu GPIO19 down GPIO5 UP GPIO18
##########################################################

substitutions:
  timezone: "Europe/Kiev" # set timezone

##########################################################

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: arduino

psram:
  mode: octal
  speed: 80MHz

esphome:
  name: "monster"
  friendly_name: "monster"
  platformio_options:
    board_build.flash_mode: dio

  on_boot:
    - priority: -100.0
      then:
        
        - lambda: id(page) = 1; 
        - delay: 5s 
        - if:
            condition:
              lambda: 'return id(lcd_backlight_brightness).state == 0;'
            then:
              - light.turn_off: backlight_light           
        - delay: 1s
        - script.execute: update_brightness
        - delay: 1s
        - if:
            condition:
              switch.is_on: wifi_onoff_auto
            then: 
              switch.turn_on: wifi_onoff
        - delay: 5s
        - component.update: smaragd_s1_time
        - delay: 5s
        - component.update: smaragd_s2_time
        - delay: 5s
        - component.update: smaragd_s3_time      
        - delay: 5s
        - component.update: lawn_s1_time
        - delay: 5s
        - component.update: lawn_s2_time
        - delay: 5s
        - component.update: lawn_s3_time
        - delay: 5s
        - component.update: bushes_s1_time
        - delay: 5s
        - component.update: bushes_s2_time
        - delay: 5s
        - component.update: bushes_s3_time
        - delay: 5s
        - component.update: garden_s1_time
        - delay: 5s
        - component.update: garden_s2_time
        - delay: 5s
        - component.update: garden_s3_time 
        - delay: 5s
        - component.update: sprinkler_remaining_time_golden
        - component.update: sprinkler_remaining_time_lawn
        - component.update: sprinkler_remaining_time_garden
        - component.update: sprinkler_remaining_time_bushes   
        - delay: 2s
        - lambda: id(page) = 1; 
        - delay: 5s 
        - script.execute: update_page
    - priority: 200
      then:
        - ds1307.read_time:
            id: rtc_time
    - priority: 600
      then:   
        - light.turn_on:
            id: esp_light
            red: 0%
            blue: 100%
            green: 0%
            brightness: 100%
            effect: pulse 
        - delay: 5s 
        - light.turn_off: esp_light    

##########################################################

logger:
  level: DEBUG
  logs:
    component: ERROR
    display: NONE
    number: NONE
    switch: NONE
    sensor: NONE
    time: NONE
    rtttl: NONE
    light: NONE
    button: NONE
    script: NONE
    binary_sensor: NONE
    text_sensor: NONE  

##########################################################

web_server:
  port: 80
  version: 3
  local: True
  log: True
  sorting_groups:
    - id: rain_delay
      name: "Rain Delay"
      sorting_weight: 0 
    - id: ha_info_golden_smaragd
      name: "HA info Golden Smaragd"     
      sorting_weight: 1      
    - id: ha_info_bushes
      name: "HA info Bushes"     
      sorting_weight: 7       
    - id: ha_info_lawn
      name: "HA info Lawn"     
      sorting_weight: 3    
    - id: ha_info_garden
      name: "HA info Garden"     
      sorting_weight: 5        
    - id: smaragd_grup
      name: "Smaragd"
      sorting_weight: 2 
    - id: lawn_grup
      name: "Lawn"
      sorting_weight: 4
    - id: garden_grup
      name: "Garden"
      sorting_weight: 6   
    - id: bushes_grup
      name: "Bushes"
      sorting_weight: 8    
    - id: time_settings
      name: "Time settings"
      sorting_weight: 9   
    - id: button_menu
      name: "Button menu"
      sorting_weight: 10     
    - id: light_settings
      name: "Light Settings"
      sorting_weight: 11
    - id: esp_settings
      name: "Esp Settings"
      sorting_weight: 12 
    
##########################################################

wifi:
  enable_on_boot: False
  output_power: 10dB
  reboot_timeout: 0s
  on_connect:
    - light.turn_on:
        id: esp_light
        red: 0%
        blue: 0%
        green: 100%
        brightness: 100%
        effect: pulse
    - lambda: id(page) = 86;
    - delay: 3s
    - light.turn_off: esp_light
    - component.update: esp_ip
    - component.update: esp_ssid
    - logger.log: WiFi is connected!
    - lambda: id(page) = 2; 
    - delay: 2s 
    - lambda: id(page) = 1; 
    - delay: 10s
    - if:
        condition:
          api.connected:
        then: 
          - delay: 5s
          - logger.log: "light 3"
          - light.turn_on:
              id: esp_light
              red: 100%
              blue: 100%
              green: 50%
              brightness: 100%
              effect: pulse
          - lambda: id(page) = 84;
          - delay: 2s
          - lambda: id(page) = 1;
          - delay: 3s
          - script.execute: update_page
          - light.turn_off: esp_light
        else:
          - delay: 5s
          - logger.log: "light 4"
          - light.turn_on:
              id: esp_light
              red: 32%
              blue: 100%
              green: 50%
              brightness: 100%
              effect: pulse
          - lambda: id(page) = 85;
          - delay: 2s
          - lambda: id(page) = 1;
          - delay: 3s
          - script.execute: update_page
          - light.turn_off: esp_light 
    - script.execute: update_page
    - delay: 5s  

  on_disconnect:
    - logger.log: "light 5"
    - light.turn_on:
        id: esp_light
        red: 100%
        blue: 0%
        green: 0%
        brightness: 100%
        effect: pulse
    - lambda: id(page) = 95;
    - delay: 2s 
    - lambda: id(page) = 1;  
    - delay: 3s
    - light.turn_off: esp_light    
    - logger.log: WiFi no connected!
    - component.update: esp_ip
    - component.update: esp_ssid
    - delay: 1s
    - script.execute: update_page 
  ap:
    ssid: "MONSTER Hotspot"
    ap_timeout: 1min

  networks:
    - ssid: "zid"
      password: "zidnubira1"
      bssid: 20:76:93:56:8C:36
      #priority: 1
      manual_ip: 
        static_ip: 192.168.0.182
        gateway: 192.168.0.1
        subnet: 255.255.255.0
      
    - ssid: "zid"
      password: "zidnubira1"
      bssid: F0:B4:29:D9:4A:CC
      #priority: 2   
      manual_ip: 
        static_ip: 192.168.0.182
        gateway: 192.168.0.1
        subnet: 255.255.255.0
                                      
    - ssid: "WabcoPAOffice"
      password: "P8Zgz6SF"
      #priority: 3       
      # manual_ip:
      #   static_ip: 192.168.51.197 
      #   gateway: 192.168.51.1       
      #   subnet: 255.255.255.0

       
    - ssid: "WabcoPA"
      password: "P8Zgz6SF"
      #priority: 4 
    # #   # manual_ip:
    # #   #   static_ip: 192.168.51.197 
    # #   #   gateway: 192.168.51.1       
    # #   #   subnet: 255.255.255.0

    - ssid: "ESP"
      password: "P8Zgz6SF"
      #priority: 5

########################################################

api:
  reboot_timeout: 0s
  on_client_connected:
    - delay: 3s
    - logger.log: "light 6"
    - light.turn_on:
        id: esp_light
        red: 60%
        blue: 100%
        green: 0%
        brightness: 60%
        effect: pulse
    - delay: 3s
    - light.turn_off: esp_light
  on_client_disconnected:
    - delay: 3s
    - logger.log: "light 7"
    - light.turn_on:
        id: esp_light
        red: 100%
        blue: 0%
        green: 0%
        brightness: 60%
        effect: pulse
    - delay: 3s
    - light.turn_off: esp_light
  actions:
    - action: rtttl_play
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

########################################################

ota:
  platform: esphome

########################################################
 
# captive_portal:

########################################################

output:
  - platform: ledc 
    pin: GPIO12
    id: backlight
    frequency: 5000
  - platform: ledc
    pin: GPIO17  
    id: rtttl_out
  
########################################################

rtttl:
  output: rtttl_out
  id: my_rtttl

########################################################

i2c:
  - id: bus_slow
    sda: GPIO01
    scl: GPIO02
    scan: True
    frequency: 100kHz  
  - id: bus_fas 
    sda: GPIO10
    scl: GPIO11
    scan: true
    frequency: 400kHz  

xl9535:
  - id: xl9535_hub
    address: 0x20
    i2c_id: bus_fas

##########################################################

globals:
  - id: menu_active
    type: bool                       
    restore_value: no
    initial_value: "false"  
  - id: page
    type: int
    initial_value: "1"
  - id: auto_bright
    type: bool
    restore_value: no
    initial_value: "false"

##########################################################

lcd_menu:
  id: main_menu
  root_item_id: menu_root
  mode: rotary
  active: False
  display_id: lcd_display       
  items:
    - type: switch
      text: 'ALL Off/ON'
      switch: general
    - type: switch
      text: '24h Rain Delay'
      switch: schedule_raindelay_24h_enabled
    - type: switch
      text: '48h Rain Delay'
      switch: schedule_raindelay_48h_enabled

#############################Smaragd Schedule############################################    
    ############################################
    - type: menu
      text: 'Smaragd Schedule'
      items: 
        - type: back
          text: "Back"
        ############################################
        - type: number
          text: Multiplier
          number: smaragd_multiplier
        
        - type: menu
          text: !lambda 'return "S1: " + id(smaragd_s1_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 1' 
              switch: smaragd_schedule1_enabled
            - type: number
              text: 'Schedule 1'
              number: smaragd_s1t_hour
              value_lambda: 'return to_string(static_cast<int>(id(smaragd_s1t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 1'
              number: smaragd_s1t_minute
              value_lambda: 'return to_string(static_cast<int>(id(smaragd_s1t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;                           
        ############################################
        - type: menu
          text: !lambda 'return "S2: " + id(smaragd_s2_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 2' 
              switch: smaragd_schedule2_enabled
            - type: number
              text: 'Schedule 2'
              number: smaragd_s2t_hour
              value_lambda: 'return to_string(static_cast<int>(id(smaragd_s2t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 2'
              number: smaragd_s2t_minute
              value_lambda: 'return to_string(static_cast<int>(id(smaragd_s2t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;            
        ############################################
        - type: menu
          text: !lambda 'return "S3: " + id(smaragd_s3_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 3' 
              switch: smaragd_schedule3_enabled
            - type: number
              text: 'Schedule 3'
              number: smaragd_s3t_hour
              value_lambda: 'return to_string(static_cast<int>(id(smaragd_s3t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 3'
              number: smaragd_s3t_minute
              value_lambda: 'return to_string(static_cast<int>(id(smaragd_s3t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;   
        ############################################
        - type: menu
          text: "Select days"
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: "Monday"
              switch: smaragd_monday
            - type: switch
              text: "Tuesday"
              switch: smaragd_tuesday
            - type: switch
              text: "Wednesday"
              switch: smaragd_wednesday
            - type: switch
              text: "Thursday"
              switch: smaragd_thursday
            - type: switch
              text: "Friday"
              switch: smaragd_friday
            - type: switch
              text: "Saturday"
              switch: smaragd_saturday
            - type: switch
              text: "Sunday"
              switch: smaragd_sunday
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;
            ############################################         
        ############################################
        - type: number
          text: "1 Duration"
          number: smaragd_1_run_duration
          value_lambda: 'return to_string(static_cast<int>(id(smaragd_1_run_duration).state)) + " min";'
        - type: number
          text: "2 Duration"
          number: smaragd_2_run_duration
          value_lambda: 'return to_string(static_cast<int>(id(smaragd_2_run_duration).state)) + " min";'
        - type: number
          text: "Repeat Count"
          number: smaragd_repeat_count
          value_lambda: 'return to_string(static_cast<int>(id(smaragd_repeat_count).state));'
        ############################################
        - type: switch
          text: "Zone 1 Auto"
          switch: zone_1_auto   
        - type: switch
          text: "Zone 2 Auto"
          switch: zone_2_auto   
        - type: switch
          text: "Smaragd AA"
          switch: smaragd_auto_advance   
        - type: switch
          text: "Smaragd Cycl"
          switch: smaragd_ctrlr_main_switch  
        ############################################
        - type: back
          text: "Back"
        - type: command
          text: 'Hide' 
          on_value:
            then:
              - script.execute: turn_on_backlight
              - display_menu.show_main
              - delay: 1s
              - lambda: |-
                  id(menu_active) = false;  
#############################Smaragd Schedule############################################

#############################Lawn Schedule############################################    
    ############################################
    - type: menu
      text: 'Lawn Schedule'
      items: 
        - type: back
          text: "Back"
        ############################################
        - type: number
          text: Multiplier
          number: lawn_multiplier
        
        - type: menu
          text: !lambda 'return "L1: " + id(lawn_s1_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 1' 
              switch: lawn_schedule1_enabled
            - type: number
              text: 'Schedule 1'
              number: lawn_s1t_hour
              value_lambda: 'return to_string(static_cast<int>(id(lawn_s1t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 1'
              number: lawn_s1t_minute
              value_lambda: 'return to_string(static_cast<int>(id(lawn_s1t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;                           
        ############################################
        - type: menu
          text: !lambda 'return "L2: " + id(lawn_s2_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 2' 
              switch: lawn_schedule2_enabled
            - type: number
              text: 'Schedule 2'
              number: lawn_s2t_hour
              value_lambda: 'return to_string(static_cast<int>(id(lawn_s2t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 2'
              number: lawn_s2t_minute
              value_lambda: 'return to_string(static_cast<int>(id(lawn_s2t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;            
        ############################################
        - type: menu
          text: !lambda 'return "L3: " + id(lawn_s3_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 3' 
              switch: lawn_schedule3_enabled
            - type: number
              text: 'Schedule 3'
              number: lawn_s3t_hour
              value_lambda: 'return to_string(static_cast<int>(id(lawn_s3t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 3'
              number: lawn_s3t_minute
              value_lambda: 'return to_string(static_cast<int>(id(lawn_s3t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;   
        ############################################
        - type: menu
          text: "Select days"
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: "Monday"
              switch: lawn_monday
            - type: switch
              text: "Tuesday"
              switch: lawn_tuesday
            - type: switch
              text: "Wednesday"
              switch: lawn_wednesday
            - type: switch
              text: "Thursday"
              switch: lawn_thursday
            - type: switch
              text: "Friday"
              switch: lawn_friday
            - type: switch
              text: "Saturday"
              switch: lawn_saturday
            - type: switch
              text: "Sunday"
              switch: lawn_sunday
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;
            ############################################         
        ############################################
        - type: number
          text: "1 Duration"
          number: lawn_1_run_duration
          value_lambda: 'return to_string(static_cast<int>(id(lawn_1_run_duration).state)) + " min";'
        - type: number
          text: "2 Duration"
          number: lawn_2_run_duration
          value_lambda: 'return to_string(static_cast<int>(id(lawn_2_run_duration).state)) + " min";'
        - type: number
          text: "3 Duration"
          number: lawn_3_run_duration
          value_lambda: 'return to_string(static_cast<int>(id(lawn_3_run_duration).state)) + " min";'
        - type: number
          text: "Repeat Count"
          number: lawn_repeat_count
          value_lambda: 'return to_string(static_cast<int>(id(lawn_repeat_count).state));'
        ############################################
        - type: switch
          text: "Zone 1 Auto"
          switch: lawn_1_auto
        - type: switch
          text: "Zone 2 Auto"
          switch: lawn_2_auto   
        - type: switch
          text: "Zone 3 Auto"
          switch: lawn_3_auto   
        - type: switch
          text: "Lawn AA"
          switch: lawn_auto_advance   
        - type: switch
          text: "Lawn Cycl"
          switch: lawn_ctrlr_main_switch  
        ############################################
        - type: back
          text: "Back"
        - type: command
          text: 'Hide' 
          on_value:
            then:
              - script.execute: turn_on_backlight
              - display_menu.show_main
              - delay: 1s
              - lambda: |-
                  id(menu_active) = false;  
#############################Lawn Schedule############################################

#############################Garden Schedule############################################    
    ############################################
    - type: menu
      text: 'Garden Schedule'
      items: 
        - type: back
          text: "Back"
        ############################################
        - type: number
          text: Multiplier
          number: garden_multiplier

        - type: menu
          text: !lambda 'return "G1: " + id(garden_s1_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 1' 
              switch: garden_schedule1_enabled
            - type: number
              text: 'Schedule 1'
              number: garden_s1t_hour
              value_lambda: 'return to_string(static_cast<int>(id(garden_s1t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 1'
              number: garden_s1t_minute
              value_lambda: 'return to_string(static_cast<int>(id(garden_s1t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;                           
        ############################################
        - type: menu
          text: !lambda 'return "G2: " + id(garden_s2_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 2' 
              switch: garden_schedule2_enabled
            - type: number
              text: 'Schedule 2'
              number: garden_s2t_hour
              value_lambda: 'return to_string(static_cast<int>(id(garden_s2t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 2'
              number: garden_s2t_minute
              value_lambda: 'return to_string(static_cast<int>(id(garden_s2t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;            
        ############################################
        - type: menu
          text: !lambda 'return "G3: " + id(garden_s3_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 3' 
              switch: garden_schedule3_enabled
            - type: number
              text: 'Schedule 3'
              number: garden_s3t_hour
              value_lambda: 'return to_string(static_cast<int>(id(garden_s3t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 3'
              number: garden_s3t_minute
              value_lambda: 'return to_string(static_cast<int>(id(garden_s3t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;   
        ############################################
        - type: menu
          text: "Select days"
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: "Monday"
              switch: garden_monday
            - type: switch
              text: "Tuesday"
              switch: garden_tuesday
            - type: switch
              text: "Wednesday"
              switch: garden_wednesday
            - type: switch
              text: "Thursday"
              switch: garden_thursday
            - type: switch
              text: "Friday"
              switch: garden_friday
            - type: switch
              text: "Saturday"
              switch: garden_saturday
            - type: switch
              text: "Sunday"
              switch: garden_sunday
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;
            ############################################         
        ############################################
        - type: number
          text: "Duration"
          number: garden_duration
          value_lambda: 'return to_string(static_cast<int>(id(garden_duration).state)) + " min";'
        ############################################
        - type: back
          text: "Back"
        - type: command
          text: 'Hide' 
          on_value:
            then:
              - script.execute: turn_on_backlight
              - display_menu.show_main
              - delay: 1s
              - lambda: |-
                  id(menu_active) = false;  
#############################Garden Schedule############################################

#############################Bushes Schedule############################################    
    ############################################
    - type: menu
      text: 'Bushes Schedule'
      items: 
        - type: back
          text: "Back"
        ############################################
        - type: number
          text: Multiplier
          number: bushes_multiplier
        - type: menu
          text: !lambda 'return "B1: " + id(bushes_s1_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 1' 
              switch: bushes_schedule1_enabled
            - type: number
              text: 'Schedule 1'
              number: bushes_s1t_hour
              value_lambda: 'return to_string(static_cast<int>(id(bushes_s1t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 1'
              number: bushes_s1t_minute
              value_lambda: 'return to_string(static_cast<int>(id(bushes_s1t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;                           
        ############################################
        - type: menu
          text: !lambda 'return "B2: " + id(bushes_s2_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 2' 
              switch: bushes_schedule2_enabled
            - type: number
              text: 'Schedule 2'
              number: bushes_s2t_hour
              value_lambda: 'return to_string(static_cast<int>(id(bushes_s2t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 2'
              number: bushes_s2t_minute
              value_lambda: 'return to_string(static_cast<int>(id(bushes_s2t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;            
        ############################################
        - type: menu
          text: !lambda 'return "B3: " + id(bushes_s3_time).state;'
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: 'Schedule 3' 
              switch: bushes_schedule3_enabled
            - type: number
              text: 'Schedule 3'
              number: bushes_s3t_hour
              value_lambda: 'return to_string(static_cast<int>(id(bushes_s3t_hour).state)) + "H";'
            - type: number
              text: 'Schedule 3'
              number: bushes_s3t_minute
              value_lambda: 'return to_string(static_cast<int>(id(bushes_s3t_minute).state)) + "M";'
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;   
        ############################################
        - type: menu
          text: "Select days"
          items: 
            - type: back
              text: "Back"
            - type: switch
              text: "Monday"
              switch: bushes_monday
            - type: switch
              text: "Tuesday"
              switch: bushes_tuesday
            - type: switch
              text: "Wednesday"
              switch: bushes_wednesday
            - type: switch
              text: "Thursday"
              switch: bushes_thursday
            - type: switch
              text: "Friday"
              switch: bushes_friday
            - type: switch
              text: "Saturday"
              switch: bushes_saturday
            - type: switch
              text: "Sunday"
              switch: bushes_sunday
            - type: back
              text: "Back"
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;
            ############################################         
        ############################################
        - type: number
          text: "1 Duration"
          number: smaragd_1_run_duration
          value_lambda: 'return to_string(static_cast<int>(id(smaragd_1_run_duration).state)) + " min";'
        - type: number
          text: "2 Duration"
          number: smaragd_2_run_duration
          value_lambda: 'return to_string(static_cast<int>(id(smaragd_2_run_duration).state)) + " min";'
        - type: number
          text: "Repeat Count"
          number: bushes_repeat_count
          value_lambda: 'return to_string(static_cast<int>(id(bushes_repeat_count).state));'
        ############################################
        - type: switch
          text: "Zone 1 Auto"
          switch: zone_1_auto   
        - type: switch
          text: "Zone 2 Auto"
          switch: zone_2_auto   
        - type: switch
          text: "Bushes AA"
          switch: bushes_auto_advance   
        - type: switch
          text: "Bushes Cycl"
          switch: bushes_ctrlr_main_switch  
        ############################################
        - type: back
          text: "Back"
        - type: command
          text: 'Hide' 
          on_value:
            then:
              - script.execute: turn_on_backlight
              - display_menu.show_main
              - delay: 1s
              - lambda: |-
                  id(menu_active) = false;  
#############################Bushes Schedule############################################

#############################Display Settings#####################################            
    - type: menu
      text: 'Display Settings'
      id: display_settings
      items:
        - type: back
          text: "Back"
        - type: menu
          text: 'Time setting' 
          items: 
            - type: back
              text: "Back"
            - type: number
              text: 'Year set:'
              number: year_select
              value_lambda: 'return to_string(static_cast<int>(id(year_select).state)) + " Y";'
            - type: number
              text: 'Month set:'
              value_lambda: 'return to_string(static_cast<int>(id(month_select).state)) + " M";'
              number: month_select
            - type: number
              text: 'Day set:'
              value_lambda: 'return to_string(static_cast<int>(id(day_select).state)) + " D";'
              number: day_select
            - type: number
              text: 'Hour set:'
              value_lambda: 'return to_string(static_cast<int>(id(hours_select).state)) + " H";'
              number: hours_select
            - type: number
              text: 'Minutes set:'
              number: minutes_select
              value_lambda: 'return to_string(static_cast<int>(id(minutes_select).state)) + " M";'    
            - type: command
              text: 'Set Time'
              on_value: 
                then:
                  - button.press: set_time_button
                  - if:
                      condition:
                        - lambda: "return id(menu_active);"
                      then:
                        - lambda: "id(menu_active) = false; id(main_menu).hide();"
                        - lambda: id(page) = 96;  
                        - delay: 2s 
                        - lambda: "id(menu_active) = true; id(main_menu).show();"  
                        - script.execute: menu_hide  
            - type: back
              text: 'Back'
            - type: command
              text: 'Hide' 
              on_value:
                then:
                  - script.execute: turn_on_backlight
                  - display_menu.show_main
                  - delay: 1s
                  - lambda: |-
                      id(menu_active) = false;
        - type: number
          text: 'Brightness'
          number: lcd_backlight_brightness
          value_lambda: 'return to_string(static_cast<int>(id(lcd_backlight_brightness).state)) + "%";'
        - type: switch
          text: Auto Bright                    
          switch: automatic_brightness                     
        - type: switch
          text: "*Sound*"
          switch: sound_on_off   
        - type: switch
          text: "*WIFI auto*"
          switch: wifi_onoff_auto
        - type: switch
          text: "*WiFi ON/OFF*"
          switch: wifi_onoff      
        - type: label
          text: !lambda 'return "IP: " + id(esp_ip).state;'
        - type: label
          text: !lambda 'return "SSID: " + id(esp_ssid).state;'        
        - type: label
          text: !lambda 'return "WiFi Signal: " + to_string((int)id(wifi_percent).state) + "%";'
        - type: label
          text: !lambda 'return "MC: " + id(mac).state;'
        - type: command
          text: '*Restart ESP*' 
          on_value:
            then:
              - if:
                  condition:
                    - lambda: "return id(menu_active);"
                  then:
                    - lambda: "id(menu_active) = false; id(main_menu).hide();"
                    - lambda: id(page) = 97;  
                    - delay: 2s                 
                    - button.press: restart_btn        
        - type: back
          text: 'Back'
        - type: command
          text: 'Hide' 
          on_value:
            then:
              - script.execute: turn_on_backlight
              - display_menu.show_main
              - delay: 1s
              - lambda: |-
                  id(menu_active) = false;
    - type: command
      text: 'Hide' 
      on_value:
        then:
          - script.execute: turn_on_backlight
          - lambda: |-
              id(menu_active) = false;

######################################################################       

sprinkler:

##########################################################

  - id: garden
    name: "Garden"
    valves:
      - valve_switch: "Garden Active"
        valve_switch_id: sprinkler_valve_sw8
        run_duration_number: 
          id: garden_duration
          name: "Garden Duration"
          icon: "mdi:timer-outline"
          initial_value: 1
          max_value: 120
          min_value: 1
          step: 1
          unit_of_measurement: min
          web_server:
            sorting_group_id: garden_grup
          on_value:
            then: 
              - component.update: garden_s1_time
              - component.update: garden_s2_time
              - component.update: garden_s3_time

##########################################################          

  - id: golden_smaragd
    name: "Golden Smaragd"
    main_switch: 
      name: "Smaragd Cycle Active"
      icon: "mdi:sprinkler-variant"
      id: smaragd_ctrlr_main_switch
      #restore_mode: RESTORE_DEFAULT_ON
      web_server:
        sorting_group_id: smaragd_grup   
      on_turn_on: 
        then:
          - script.execute: update_remaining_time_smaragd
      on_turn_off: 
        then:
          - script.stop: update_remaining_time_smaragd
          - delay: 1s
          - component.update: sprinkler_remaining_time_golden
    auto_advance_switch: 
      name: "Smaragd Auto Advance"
      icon: "mdi:palette-advanced"
      id: smaragd_auto_advance
      web_server:
        sorting_group_id: smaragd_grup 
      on_turn_off: 
        then:
          - script.execute: sound
          
      on_turn_on: 
        then:
          script.execute: sound
    valve_overlap: 2s
    repeat_number:
      id: smaragd_repeat_count
      name: "Smaragd Repeat Count"
      initial_value: 1
      min_value: 0
      max_value: 10
      step: 1
      icon: "mdi:hours-24"
      restore_value: yes
      web_server:
        sorting_group_id: smaragd_grup 
        sorting_weight: 21
      on_value:
        then: 
          - component.update: smaragd_s1_time
          - component.update: smaragd_s2_time
          - component.update: smaragd_s3_time
    valves:        
      - valve_switch: "Smaragd 1 Active"        
        enable_switch: 
          name: "Smaragd Zone 1 Auto"
          id: zone_1_auto
          icon: "mdi:toggle-switch"
          #restore_mode: RESTORE_DEFAULT_OFF
          web_server:
            sorting_group_id: smaragd_grup
            sorting_weight: 17
          on_turn_off: 
            then:
              script.execute: sound
          on_turn_on: 
            then:
              script.execute: sound
        run_duration_number: 
          id: smaragd_1_run_duration
          name: "Smaragd 1 Run Duration"
          icon: "mdi:timer-outline"
          initial_value: 15
          max_value: 20
          min_value: 1
          step: 1
          unit_of_measurement: min
          on_value:
            then: 
              - component.update: smaragd_s1_time
              - component.update: smaragd_s2_time
              - component.update: smaragd_s3_time
          web_server:
            sorting_group_id: smaragd_grup
            sorting_weight: 19
        valve_switch_id: smaragd_valve1
      - valve_switch: "Smaragd 2 Active"
        enable_switch: 
          name: "Smaragd Zone 2 Auto"
          id: zone_2_auto
          icon: "mdi:toggle-switch"
          #restore_mode: RESTORE_DEFAULT_OFF
          web_server:
            sorting_group_id: smaragd_grup
            sorting_weight: 18
          on_turn_off: 
            then:
              script.execute: sound
          on_turn_on: 
            then:
              script.execute: sound
        run_duration_number: 
          id: smaragd_2_run_duration
          name: "Smaragd 2 Run Duration"
          icon: "mdi:timer-outline"
          initial_value: 15
          max_value: 20
          min_value: 1
          step: 1
          unit_of_measurement: min
          on_value:
            then: 
              - component.update: smaragd_s1_time
              - component.update: smaragd_s2_time
              - component.update: smaragd_s3_time
          web_server:
            sorting_group_id: smaragd_grup
            sorting_weight: 20
        valve_switch_id: smaragd_valve2

##########################################################

  - id: lawn
    name: "Lawn"
    main_switch: 
      name: "Lawn Cycle Active"
      icon: "mdi:sprinkler-variant"
      id: lawn_ctrlr_main_switch
      web_server:
        sorting_group_id: lawn_grup   
      on_turn_on: 
        then:
          - script.execute: update_remaining_time_lawn
      on_turn_off: 
        then:
          - script.stop: update_remaining_time_lawn      
          - delay: 1s
          - component.update: sprinkler_remaining_time_lawn
    auto_advance_switch: 
      name: "Lawn Auto Advance"
      icon: "mdi:palette-advanced"
      id: lawn_auto_advance
      web_server:
        sorting_group_id: lawn_grup 
      on_turn_off: 
        then:
          - script.execute: sound
          
      on_turn_on: 
        then:
          script.execute: sound
    valve_overlap: 2s
    repeat_number: 
      id: lawn_repeat_count  
      name: "Lawn Repeat Count"
      min_value: 0
      max_value: 10
      initial_value: 0
      step: 1
      icon: "mdi:hours-24"
      restore_value: yes
      web_server:
        sorting_group_id: lawn_grup
        sorting_weight: 23
      on_value:
        then: 
          - component.update: lawn_s1_time
          - component.update: lawn_s2_time
          - component.update: lawn_s3_time
    valves: 
      - valve_switch: "Lawn 1 Active"
        enable_switch: 
          name: "Lawn 1 Auto"
          id: lawn_1_auto
          icon: "mdi:toggle-switch"
          web_server:
            sorting_group_id: lawn_grup
            sorting_weight: 17
          on_turn_off: 
            then:
              - script.execute: sound
              
          on_turn_on: 
            then:
              script.execute: sound
        run_duration_number: 
          id: lawn_1_run_duration
          name: "Lawn 1 Run Duration"
          icon: "mdi:timer-outline"
          initial_value: 1
          max_value: 20
          min_value: 1
          step: 1
          unit_of_measurement: min
          on_value:
            then: 
              - component.update: lawn_s1_time
              - component.update: lawn_s2_time
              - component.update: lawn_s3_time          
          web_server:
            sorting_group_id: lawn_grup
            sorting_weight: 20
        valve_switch_id: sprinkler_valve_sw3
      - valve_switch: "Lawn 2 Active"
        enable_switch: 
          name: "Lawn 2 Auto"
          id: lawn_2_auto
          icon: "mdi:toggle-switch"
          web_server:
            sorting_group_id: lawn_grup
            sorting_weight: 18
          on_turn_off: 
            then:
              script.execute: sound
          on_turn_on: 
            then:
              script.execute: sound
        run_duration_number: 
          id: lawn_2_run_duration
          name: "Lawn 2 Run Duration"
          icon: "mdi:timer-outline"
          initial_value: 1
          max_value: 20
          min_value: 1
          step: 1
          unit_of_measurement: min
          on_value:
            then: 
              - component.update: lawn_s1_time
              - component.update: lawn_s2_time
              - component.update: lawn_s3_time   
          web_server:
            sorting_group_id: lawn_grup
            sorting_weight: 21
        valve_switch_id: sprinkler_valve_sw4
      - valve_switch: "Lawn 3 Active"
        enable_switch: 
          name: "Lawn 3 Auto"
          id: lawn_3_auto
          icon: "mdi:toggle-switch"
          web_server:
            sorting_group_id: lawn_grup
            sorting_weight: 19
          on_turn_off: 
            then:
              script.execute: sound
          on_turn_on: 
            then:
              script.execute: sound
        run_duration_number: 
          id: lawn_3_run_duration
          name: "Lawn 3 Run Duration"
          icon: "mdi:timer-outline"
          initial_value: 1
          max_value: 20
          min_value: 1
          step: 1
          unit_of_measurement: min
          on_value:
            then: 
              - component.update: lawn_s1_time
              - component.update: lawn_s2_time
              - component.update: lawn_s3_time   
          web_server:
            sorting_group_id: lawn_grup
            sorting_weight: 22
        valve_switch_id: sprinkler_valve_sw5

##########################################################
      
  - id: bushes
    name: "Bushes"
    main_switch: 
      name: "Bushes Cycle Active"
      icon: "mdi:sprinkler-variant"
      id: bushes_ctrlr_main_switch
      web_server:
        sorting_group_id: bushes_grup 

      on_turn_on: 
        then:
          - script.execute: update_remaining_time_bushes
      on_turn_off: 
        then:
          - script.stop: update_remaining_time_bushes 
          - delay: 1s 
          - component.update: sprinkler_remaining_time_bushes    
    auto_advance_switch: 
      name: "Bushes Auto Advance"
      icon: "mdi:palette-advanced"
      id: bushes_auto_advance
      web_server:
        sorting_group_id: bushes_grup 
      on_turn_off: 
        then:
          - script.execute: sound  
      on_turn_on: 
        then:
          script.execute: sound
    valve_overlap: 2s
    repeat_number:
      id: bushes_repeat_count
      name: "Bushes Repeat Count"
      initial_value: 0
      min_value: 0
      max_value: 10
      step: 1
      icon: "mdi:hours-24"
      restore_value: yes
      web_server:
        sorting_group_id: bushes_grup 
        sorting_weight: 21
      on_value:
        then: 
          - component.update: bushes_s1_time
          - component.update: bushes_s2_time
          - component.update: bushes_s3_time
    valves:
      - valve_switch: "Bushes 1 Active"
        enable_switch: 
          name: "Bushes 1 Auto"
          id: bushes_1_auto
          icon: "mdi:toggle-switch"
          web_server:
            sorting_group_id: bushes_grup
            sorting_weight: 17
          on_turn_off: 
            then:
              script.execute: sound
          on_turn_on: 
            then:
              script.execute: sound
        run_duration_number: 
          id: bushes_1_run_duration
          name: "Bushes 1 Run Duration"
          icon: "mdi:timer-outline"
          initial_value: 1
          max_value: 20
          min_value: 1
          step: 1
          unit_of_measurement: min
          on_value:
            then: 
              - component.update: bushes_s1_time
              - component.update: bushes_s2_time
              - component.update: bushes_s3_time
          web_server:
            sorting_group_id: bushes_grup
            sorting_weight: 19
        valve_switch_id: sprinkler_valve_sw6
      - valve_switch: "Bushes 2 Active"
        enable_switch: 
          name: "Bushes 2 Auto"
          id: bushes_2_auto
          icon: "mdi:toggle-switch"
          web_server:
            sorting_group_id: bushes_grup
            sorting_weight: 18  
          on_turn_off: 
            then:
              script.execute: sound
          on_turn_on: 
            then:
              script.execute: sound
        run_duration_number: 
          id: bushes_2_run_duration
          name: "Bushes 2 Run Duration"
          icon: "mdi:timer-outline"
          initial_value: 1
          max_value: 20
          min_value: 1
          step: 1
          unit_of_measurement: min
          on_value:
            then: 
              - component.update: bushes_s1_time
              - component.update: bushes_s2_time
              - component.update: bushes_s3_time
          web_server:
            sorting_group_id: bushes_grup
            sorting_weight: 20
        valve_switch_id: sprinkler_valve_sw7

##########################################################

display:

##########################################################  

  - platform: lcd_pcf8574
    dimensions: 20x4
    i2c_id: bus_fas
    address: 0x27    
    id: lcd_display
    user_characters:
      - position: 4  
        data:
          - 0b00001
          - 0b00010
          - 0b00101
          - 0b11010
          - 0b11010
          - 0b00101
          - 0b00010
          - 0b00001
      - position: 5  
        data:
          - 0b11111
          - 0b11011
          - 0b10101
          - 0b10101
          - 0b10101
          - 0b10101
          - 0b10101
          - 0b10101
      - position: 6 
        data:
          - 0b10101
          - 0b10101
          - 0b10101
          - 0b10101
          - 0b10101
          - 0b10101
          - 0b11011
          - 0b11111
      - position: 7  
        data:
          - 0b10000
          - 0b01000
          - 0b10100
          - 0b01011
          - 0b01011
          - 0b10100
          - 0b01000
          - 0b10000
    
    lambda: |-
          if (id(menu_active)) {
            id(main_menu).draw(); 
          } else {
            switch (id(page)){ 
              
              case 1:
                it.clear();  
                it.print((20 - 7) / 2, 0, "MONSTER!");
                it.print((20 - 20) / 2, 1, "Sprinkler Controller");
                it.print(7, 2, "by ZID");
                it.print(6, 3, "LOADING!");
                it.print(0, 2, "\x05");  
                it.print(19, 2, "\x05");  
                it.print(1, 2, "\x04");  
                it.print(18, 2, "\x07");  
                it.print(0, 3, "\x06");  
                it.print(19, 3, "\x06");  
                break;
              
              case 2:
                it.clear();  
                it.printf(0, 0, "IP: %s", id(esp_ip).state.c_str());       
                it.printf(0, 1, "SSID: %s", id(esp_ssid).state.c_str()); 
                it.printf(0, 2, "UP: %s", id(formatted_uptime).state.c_str());
                //it.printf(12, 2, "ST: %.0f%%", id(wifi_percent).state);
                it.printf(0, 3, id(current_time).state.c_str());
                break;

              case 3:
                it.clear();  
                it.print(0, 0, "Smaragd Schedule");
                it.printf(0, 1, "1: %s", id(smaragd_s1_time).state.c_str());
                it.printf(0, 2, "2: %s", id(smaragd_s2_time).state.c_str());
                it.printf(0, 3, "3: %s", id(smaragd_s3_time).state.c_str());
                break;              

              case 4:
                it.clear();  
                it.print(0, 0, "Lawn Schedule");
                it.printf(0, 1, "1: %s", id(lawn_s1_time).state.c_str());
                it.printf(0, 2, "2: %s", id(lawn_s2_time).state.c_str());
                it.printf(0, 3, "3: %s", id(lawn_s3_time).state.c_str());
                break;

              case 5:
                it.clear();  
                it.print(0, 0, "Garden Schedule");
                it.printf(0, 1, "1: %s", id(garden_s1_time).state.c_str());
                it.printf(0, 2, "2: %s", id(garden_s2_time).state.c_str());
                it.printf(0, 3, "3: %s", id(garden_s3_time).state.c_str());
                break;

              case 6:
                it.clear();  
                it.print(0, 0, "Bushes Schedule");
                it.printf(0, 1, "1: %s", id(bushes_s1_time).state.c_str());
                it.printf(0, 2, "2: %s", id(bushes_s2_time).state.c_str());
                it.printf(0, 3, "3: %s", id(bushes_s3_time).state.c_str());
                break;

              case 7:
                it.clear();  
                if (id(bushes).auto_advance()) {
                  it.print(0, 0, "Bushes AA: ON");
                } else {
                  it.print(0, 0, "Bushes AA: OFF");
                }
                if (id(bushes_ctrlr_main_switch).state) {
                  it.print(0, 1, "Bushes Cycle: ON");
                } else {
                  it.print(0, 1, "Bushes Cycle: OFF");
                }                
                if (id(bushes).active_valve().has_value()) {
                  auto running_valve = id(bushes).active_valve().value();
                  it.printf(0, 2, "Bushes Zone %u", running_valve + 1);
                } else {
                  it.print(0, 2, "No zone running");
                }
                if (id(bushes).time_remaining_active_valve().has_value()) {
                  uint32_t remaining_time = id(bushes).time_remaining_active_valve().value();
                  uint32_t hours = remaining_time / 3600;
                  uint32_t minutes = (remaining_time % 3600) / 60;
                  uint32_t seconds = remaining_time % 60;
                  it.printf(0, 3, "Time left: %02d:%02d:%02d", hours, minutes, seconds);
                } else {
                  it.print(0, 3, "No time zone running");
                }
                break;

              case 8:
                it.clear();  
                it.print(0, 0, "Garden");  
                if (id(garden).active_valve().has_value()) {
                  auto running_valve = id(garden).active_valve().value();
                  it.printf(0, 1, "Garden Zone %u", running_valve + 1);
                } else {
                  it.print(0, 1, "No zone running");
                }
                if (id(garden).time_remaining_active_valve().has_value()) {
                  uint32_t remaining_time = id(garden).time_remaining_active_valve().value();
                  uint32_t hours = remaining_time / 3600;
                  uint32_t minutes = (remaining_time % 3600) / 60;
                  uint32_t seconds = remaining_time % 60;
                  it.printf(0, 2, "Time left: %02d:%02d:%02d", hours, minutes, seconds);
                } else {
                  it.print(0, 2, "No time zone running");
                }
                break;

              case 9:
                it.clear();  
                if (id(lawn).auto_advance()) {
                  it.print(0, 0, "Lawn AA: ON");
                } else {
                  it.print(0, 0, "Lawn AA: OFF");
                }
                if (id(lawn_ctrlr_main_switch).state) {
                  it.print(0, 1, "Lawn Cycle: ON");
                } else {
                  it.print(0, 1, "Lawn Cycle: OFF");
                }                
                if (id(lawn).active_valve().has_value()) {
                  auto running_valve = id(lawn).active_valve().value();
                  it.printf(0, 2, "Lawn Zone %u", running_valve + 1);
                } else {
                  it.print(0, 2, "No zone running");
                }
                if (id(lawn).time_remaining_active_valve().has_value()) {
                  uint32_t remaining_time = id(lawn).time_remaining_active_valve().value();
                  uint32_t hours = remaining_time / 3600;
                  uint32_t minutes = (remaining_time % 3600) / 60;
                  uint32_t seconds = remaining_time % 60;
                  it.printf(0, 3, "Time left: %02d:%02d:%02d", hours, minutes, seconds);
                } else {
                  it.print(0, 3, "No time zone running");
                }
                break;

              case 10:
                it.clear();  
                if (id(golden_smaragd).auto_advance()) {
                  it.print(0, 0, "Smaragd AA: ON");
                } else {
                  it.print(0, 0, "Smaragd AA: OFF");
                }
                if (id(smaragd_ctrlr_main_switch).state) {
                  it.print(0, 1, "Smaragd Cycle: ON");
                } else {
                  it.print(0, 1, "Smaragd Cycle: OFF");
                }                
                if (id(golden_smaragd).active_valve().has_value()) {
                  auto running_valve = id(golden_smaragd).active_valve().value();
                  it.printf(0, 2, "Smaragd Zone %u", running_valve + 1);
                } else {
                  it.print(0, 2, "No zone running");
                }
                if (id(golden_smaragd).time_remaining_active_valve().has_value()) {
                  uint32_t remaining_time = id(golden_smaragd).time_remaining_active_valve().value();
                  uint32_t hours = remaining_time / 3600;
                  uint32_t minutes = (remaining_time % 3600) / 60;
                  uint32_t seconds = remaining_time % 60;
                  it.printf(0, 3, "Time left: %02d:%02d:%02d", hours, minutes, seconds);
                } else {
                  it.print(0, 3, "No time zone running");
                }
                break;

              case 83:
                it.clear();  
                it.print(3, 1, "ALL schedules");
                it.print(8, 2, "ON!"); 
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05");  
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");             
                break; 

              case 84:
                it.clear();  
                it.print(8, 0, "Home");  
                it.print(5, 1, "Assistant");
                it.print(5, 2, "connected!");   
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05"); 
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");        
                break;

              case 85:
                it.clear();  
                it.print(8, 0, "Home");  
                it.print(5, 1, "Assistant");
                it.print(3, 2, "not connected!");   
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05"); 
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");        
                break;

              case 86:
                it.clear();  
                it.print(8, 1, "WiFi");  
                it.print(4, 2, "is connected!");   
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05"); 
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");        
                break;

              case 87:
                it.clear();  
                it.print(6, 1, "WIFI ON!");    
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05");  
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06"); 
                it.print(19, 2, "\x06");        
                break;

              case 88:
                it.clear();  
                it.print(5, 1, "WIFI OFF!");
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05"); 
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");          
                break;

              case 89:
                it.clear();  
                it.print(3, 1, "24h rain delay"); 
                it.print(6, 2, "disabled!"); 
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05");  
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");           
                break;

              case 90:
                it.clear();  
                it.print(3, 0, "24h rain delay"); 
                it.print(6, 1, "enabled!"); 
                it.print(2, 2, "Hold down for 10s"); 
                it.print(4, 3, "to turn off!"); 
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05");  
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");         
                break; 

              case 91:
                it.clear();  
                it.print(3, 1, "48h rain delay"); 
                it.print(6, 2, "disabled!"); 
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05");  
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");           
                break;

              case 92:
                it.clear();  
                it.print(3, 0, "48h rain delay"); 
                it.print(6, 1, "enabled!"); 
                it.print(2, 2, "Hold up for 10s"); 
                it.print(4, 3, "to turn off!"); 
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05");  
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");             
                break;    

              case 93:
                it.clear();  
                it.print(6, 1, "Watering"); 
                it.print(0, 1, "\x05"); 
                it.print(19, 1, "\x05");  
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");            
                break;      

              case 94:
                it.clear();  
                it.print(2, 0, "Waiting Schedule");
                it.print(3, 1, "All sprinklers"); 
                it.print(6, 2, "are off!"); 
                it.print(2, 3, "Waiting Schedule"); 
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05"); 
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");             
                break;      

              case 95:
                it.clear();  
                it.print(7, 1, "No WIFI"); 
                it.print(5, 2, "connection!");
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05"); 
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");                
                break;

              case 96:
                it.clear();  
                it.print(0, 1, "Manual time is set! ");  
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05"); 
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");            
                break;

              case 97:
                it.clear();  
                it.print(6, 2, "Restart! ");       
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05"); 
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");        
                break;

              case 98:
                it.clear();  
                it.print(0, 0, "OTA start! ");   
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05"); 
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");                  
                break;

              case 99:
                it.clear();  
                it.print(4, 0, "No schedule!");
                it.print(3, 1, "All sprinklers"); 
                it.print(6, 2, "are off!"); 
                it.print(4, 3, "No schedule!");
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05");  
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");           
                break;            

              case 100:
                it.clear();  
                it.print(3, 0, "ALL schedules");
                it.print(8, 1, "OFF!"); 
                it.print(2, 2, "Hold menu for 10s"); 
                it.print(4, 3, "to turn off!"); 
                it.print(0, 1, "\x05");  
                it.print(19, 1, "\x05");  
                it.print(1, 1, "\x04");  
                it.print(18, 1, "\x07");  
                it.print(0, 2, "\x06");  
                it.print(19, 2, "\x06");             
                break;                        

            }
          }
###########################################################

switch:

  - platform: template
    id: general
    icon: "mdi:water-off"
    name: "ALL OFF/ON"
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: True
    web_server:
      sorting_group_id: rain_delay
      sorting_weight: 1
    turn_on_action:
      then:
        - script.execute: all_off
        - script.execute: sound
        - light.turn_on:
            id: esp_light
            effect: "Slow Pulse"
            brightness: 100%
        - if:
            condition:
              - lambda: "return id(menu_active);"
            then:
              - delay: 1s
              - lambda: "id(menu_active) = false; id(main_menu).hide();"
              - lambda: id(page) = 100;  
              - delay: 2s 
              - lambda: "id(menu_active) = true; id(main_menu).show();"  
              - script.execute: menu_hide 
            else:  
              - delay: 1s
              - lambda: |
                  id(page) = 100;           
        - delay: 3s    
        - script.execute: update_page 
    turn_off_action: 
      then:        
        - light.turn_off: esp_light
        - script.execute: sound
        - if:
            condition:
              - lambda: "return id(menu_active);"
            then:
              - delay: 1s
              - lambda: "id(menu_active) = false; id(main_menu).hide();"
              - lambda: id(page) = 83;  
              - delay: 2s 
              - lambda: "id(menu_active) = true; id(main_menu).show();"  
              - script.execute: menu_hide 
            else:  
              - delay: 1s
              - lambda: |
                  id(page) = 83;  
        - delay: 2s                   
        - script.execute: update_page    

  - platform: template
    id: wifi_onoff
    icon: "mdi:wifi-arrow-left-right"
    name: "WIFI ON/OFF"
    optimistic: True
    restore_mode: ALWAYS_OFF
    web_server:
      sorting_group_id: esp_settings
      sorting_weight: 1
    on_turn_on: 
      then:
        - wifi.enable:
        - rtttl.play: "s:d=4,o=5,b=125:16p,16d7"
        - logger.log: WiFi on!
        - lambda: id(page) = 87; 
        - delay: 3s
        - script.execute: update_page
    on_turn_off: 
      then:
        - wifi.disable:
        - rtttl.play: "s:d=4,o=5,b=125:16p,16d7"
        - logger.log: WiFi off!
        - lambda: id(page) = 88;   
        - delay: 3s
        - script.execute: update_page

  - platform: template
    id: wifi_onoff_auto
    icon: "mdi:wifi-arrow-left-right"
    name: "WIFI ON/OFF auto"
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON
    web_server:
      sorting_group_id: esp_settings
      sorting_weight: 2
    on_turn_on: 
      then:
        - script.execute: sound
    on_turn_off: 
      then:
        - script.execute: sound

  - platform: template
    id: sound_on_off
    name: "Sound on/off"
    icon: "mdi:volume-high"
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_group_id: esp_settings
      sorting_weight: 3
    on_turn_off: 
      then:
        - rtttl.play: "s:d=4,o=5,b=125:16p,16d7"
    on_turn_on: 
      then:
        - rtttl.play: "s:d=4,o=5,b=125:16p,16d7"
    
###########################################################

  - platform: template
    id: bushes_sunday
    name:  "Bushes Sunday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 16
    on_turn_on:
      - component.update: bushes_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_days_status
      - script.execute: sound
    
  - platform: template
    id: bushes_monday
    name: "Bushes Monday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 10
    on_turn_on:
      - component.update: bushes_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_days_status
      - script.execute: sound
  
  - platform: template
    id: bushes_tuesday
    name: "Bushes Tuesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 11
    on_turn_on:
      - component.update: bushes_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_days_status
      - script.execute: sound
  
  - platform: template
    id: bushes_wednesday
    name: "Bushes Wednesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 12
    on_turn_on:
      - component.update: bushes_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_days_status
      - script.execute: sound
  
  - platform: template
    id: bushes_thursday
    name: "Bushes Thursday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 13
    on_turn_on:
      - component.update: bushes_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_days_status
      - script.execute: sound
 
  - platform: template
    id: bushes_friday
    name: "Bushes Friday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 14
    on_turn_on:
      - component.update: bushes_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_days_status
      - script.execute: sound
  
  - platform: template
    id: bushes_saturday
    name: "Bushes Saturday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 15
    on_turn_on:
      - component.update: bushes_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_days_status
      - script.execute: sound
  
###########################################################

  - platform: template
    id: bushes_schedule1_enabled
    name: "Bushes Schedule 1"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 1
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: bushes_s1_time
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_s1_time
      - script.execute: sound
  
  - platform: template
    id: bushes_schedule2_enabled
    name: "Bushes Schedule 2"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup 
      sorting_weight: 2
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: bushes_s2_time
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_s2_time
      - script.execute: sound
  
  - platform: template
    id: bushes_schedule3_enabled
    name: "Bushes Schedule 3"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 3
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: bushes_s3_time
      - script.execute: sound
    on_turn_off:
      - component.update: bushes_s3_time
      - script.execute: sound

###########################################################

  - platform: template
    id: lawn_sunday
    name:  "Lawn Sunday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup
      sorting_weight: 16
    on_turn_on:
      - component.update: lawn_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_days_status
      - script.execute: sound

  - platform: template
    id: lawn_monday
    name: "Lawn Monday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup
      sorting_weight: 10
    on_turn_on:
      - component.update: lawn_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_days_status
      - script.execute: sound
  
  - platform: template
    id: lawn_tuesday
    name: "Lawn Tuesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup
      sorting_weight: 11
    on_turn_on:
      - component.update: lawn_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_days_status
      - script.execute: sound
  
  - platform: template
    id: lawn_wednesday
    name: "Lawn Wednesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup
      sorting_weight: 12
    on_turn_on:
      - component.update: lawn_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_days_status
      - script.execute: sound
  
  - platform: template
    id: lawn_thursday
    name: "Lawn Thursday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup
      sorting_weight: 13
    on_turn_on:
      - component.update: lawn_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_days_status
      - script.execute: sound
 
  - platform: template
    id: lawn_friday
    name: "Lawn Friday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup
      sorting_weight: 14
    on_turn_on:
      - component.update: lawn_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_days_status
      - script.execute: sound
  
  - platform: template
    id: lawn_saturday
    name: "Lawn Saturday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup
      sorting_weight: 15
    on_turn_on:
      - component.update: lawn_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_days_status
      - script.execute: sound
  
###########################################################
   
  - platform: template
    id: lawn_schedule1_enabled
    name: "Lawn Schedule 1"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup
      sorting_weight: 1
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: lawn_s1_time
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_s1_time
      - script.execute: sound

  - platform: template
    id: lawn_schedule2_enabled
    name: "Lawn Schedule 2"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup 
      sorting_weight: 2
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: lawn_s2_time
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_s2_time
      - script.execute: sound
  
  - platform: template
    id: lawn_schedule3_enabled
    name: "Lawn Schedule 3"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    web_server:
      sorting_group_id: lawn_grup
      sorting_weight: 3
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: lawn_s3_time
      - script.execute: sound
    on_turn_off:
      - component.update: lawn_s3_time
      - script.execute: sound

###########################################################

  - platform: template
    id: garden_monday
    name: "Garden Monday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 10
    on_turn_on:
      - component.update: garden_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: garden_days_status    
      - script.execute: sound
  
  - platform: template
    id: garden_tuesday
    name: "Garden Tuesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 11
    on_turn_on:
      - component.update: garden_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: garden_days_status 
      - script.execute: sound 
  
  - platform: template
    id: garden_wednesday
    name: "Garden Wednesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 12
    on_turn_on:
      - component.update: garden_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: garden_days_status
      - script.execute: sound  
  
  - platform: template
    id: garden_thursday
    name: "Garden Thursday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 13
    on_turn_on:
      - component.update: garden_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: garden_days_status  
      - script.execute: sound
 
  - platform: template
    id: garden_friday
    name: "Garden Friday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 14
    on_turn_on:
      - component.update: garden_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: garden_days_status
      - script.execute: sound  
  
  - platform: template
    id: garden_saturday
    name: "Garden Saturday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 15
    on_turn_on:
      - component.update: garden_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: garden_days_status  
      - script.execute: sound

  - platform: template
    id: garden_sunday
    name:  "Garden Sunday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 16
    on_turn_on:
      - component.update: garden_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: garden_days_status  
      - script.execute: sound

###########################################################
  
  - platform: template
    id: garden_schedule1_enabled
    name: "Garden Schedule 1"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 1
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: garden_s1_time
      - script.execute: sound
    on_turn_off:
      - component.update: garden_s1_time
      - script.execute: sound
  
  - platform: template
    id: garden_schedule2_enabled
    name: "Garden Schedule 2"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    web_server:
      sorting_group_id: garden_grup 
      sorting_weight: 2
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: garden_s2_time
      - script.execute: sound
    on_turn_off:
      - component.update: garden_s2_time
      - script.execute: sound
  
  - platform: template
    id: garden_schedule3_enabled
    name: "Garden Schedule 3"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 3
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: garden_s3_time
      - script.execute: sound
    on_turn_off:
      - component.update: garden_s3_time
      - script.execute: sound

###########################################################  

  - platform: template
    name: "Automatic Brightness"
    icon: "mdi:brightness-6"
    id: automatic_brightness
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_group_id: light_settings    
    on_turn_on:
      then:
        - script.execute: turn_on_backlight
        - script.execute: sound
    on_turn_off: 
      then:
        - light.turn_on: backlight_light
        - script.execute: sound

###########################################################

 # relays
  - platform: gpio
    id: smaragd_valve1 
    pin: 
      xl9535: xl9535_hub
      number: 0
      mode:
        output: true
      inverted: false
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - script.execute: valve_light_on
      - script.execute: sound
    on_turn_off: 
      - script.execute: valve_light_off
      - script.execute: sound
  
  - platform: gpio
    id: smaragd_valve2
    pin: 
      xl9535: xl9535_hub
      number: 1
      mode:
        output: true
      inverted: false
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - script.execute: valve_light_on
      - script.execute: sound
    on_turn_off: 
      - script.execute: valve_light_off
      - script.execute: sound

  - platform: gpio
    id: sprinkler_valve_sw3
    restore_mode: ALWAYS_OFF
    pin: 
      xl9535: xl9535_hub
      number: 2
      mode:
        output: true
      inverted: false
    on_turn_on:
      - script.execute: valve_light_on
      - script.execute: sound
    on_turn_off: 
      - script.execute: valve_light_off
      - script.execute: sound

  - platform: gpio
    id: sprinkler_valve_sw4
    pin: 
      xl9535: xl9535_hub
      number: 3
      mode:
        output: true
      inverted: false
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - script.execute: valve_light_on
      - script.execute: sound
    on_turn_off: 
      - script.execute: valve_light_off
      - script.execute: sound

  - platform: gpio
    id: sprinkler_valve_sw5
    restore_mode: ALWAYS_OFF
    pin: 
      xl9535: xl9535_hub
      number: 4
      mode:
        output: true
      inverted: false
    on_turn_on:
      - script.execute: valve_light_on
      - script.execute: sound
    on_turn_off: 
      - script.execute: valve_light_off
      - script.execute: sound

  - platform: gpio
    id: sprinkler_valve_sw6
    restore_mode: ALWAYS_OFF
    pin: 
      xl9535: xl9535_hub
      number: 5
      mode:
        output: true
      inverted: false
    on_turn_on:
      - script.execute: valve_light_on
      - script.execute: sound
    on_turn_off: 
      - script.execute: valve_light_off
      - script.execute: sound

  - platform: gpio
    id: sprinkler_valve_sw7
    pin: 
      xl9535: xl9535_hub
      number: 6
      mode:
        output: true
      inverted: false
    on_turn_on:
      - script.execute: valve_light_on
      - script.execute: sound
    on_turn_off: 
      - script.execute: valve_light_off
      - script.execute: sound

  - platform: gpio
    id: sprinkler_valve_sw8
    pin: 
      xl9535: xl9535_hub
      number: 7
      mode:
        output: true
      inverted: false
    on_turn_on:
      - script.execute: valve_light_on
      - script.execute: sound
      - script.execute: update_remaining_time_garden
    on_turn_off: 
      - script.execute: valve_light_off
      - script.execute: sound
      - script.stop: update_remaining_time_garden 
      - delay: 1s 
      - component.update: sprinkler_remaining_time_garden 

###########################################################  

  - platform: template
    id: smaragd_monday
    name: "Smaragd Monday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 10
    on_turn_on:
      - component.update: smaragd_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_days_status
      - script.execute: sound

  - platform: template
    id: smaragd_tuesday
    name: "Smaragd Tuesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 11
    on_turn_on:
      - component.update: smaragd_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_days_status
      - script.execute: sound

  - platform: template
    id: smaragd_wednesday
    name: "Smaragd Wednesday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 12
    on_turn_on:
      - component.update: smaragd_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_days_status
      - script.execute: sound

  - platform: template
    id: smaragd_thursday
    name: "Smaragd Thursday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 13
    on_turn_on:
      - component.update: smaragd_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_days_status
      - script.execute: sound

  - platform: template
    id: smaragd_friday
    name: "Smaragd Friday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 14
    on_turn_on:
      - component.update: smaragd_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_days_status
      - script.execute: sound

  - platform: template
    id: smaragd_saturday
    name: "Smaragd Saturday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 15
    on_turn_on:
      - component.update: smaragd_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_days_status
      - script.execute: sound

  - platform: template
    id: smaragd_sunday
    name: "Smaragd Sunday"
    icon: "mdi:calendar-range"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 16
    on_turn_on:
      - component.update: smaragd_days_status
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_days_status
      - script.execute: sound
  
###########################################################
   
  - platform: template
    id: smaragd_schedule1_enabled
    name: "Smaragd Schedule 1"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 1
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: smaragd_s1_time
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_s1_time
      - script.execute: sound

  - platform: template
    id: smaragd_schedule2_enabled
    name: "Smaragd Schedule 2"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup 
      sorting_weight: 2
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: smaragd_s2_time
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_s2_time
      - script.execute: sound
  
  - platform: template
    id: smaragd_schedule3_enabled
    name: "Smaragd Schedule 3"
    icon: "mdi:clock-outline"
    entity_category: config
    restore_mode: ALWAYS_OFF
    optimistic: true
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 3
    turn_on_action:
      then:
        - script.execute: update_page
    turn_off_action:
      then:
        - script.execute: update_page
    on_turn_on:
      - component.update: smaragd_s3_time
      - script.execute: sound
    on_turn_off:
      - component.update: smaragd_s3_time
      - script.execute: sound

###########################################################

  - platform: template
    id: schedule_raindelay_24h_enabled
    name: "Enable 24h Rain Delay"
    icon: "mdi:weather-cloudy-clock"
    restore_mode: DISABLED
    web_server:
      sorting_group_id: rain_delay     
    optimistic: true
    turn_on_action:
      then:
        - script.execute: sound
        - sprinkler.shutdown: garden
        - sprinkler.shutdown: golden_smaragd
        - sprinkler.shutdown: lawn
        - sprinkler.shutdown: bushes    
        - delay: 1s
        - light.turn_on:
            id: esp_light
            effect: "Slow Pulse"
            brightness: 100%
        - if:
            condition:
              - switch.is_on: schedule_raindelay_48h_enabled
            then: 
              - switch.turn_off: schedule_raindelay_48h_enabled
        - if:
            condition:
              - lambda: "return id(menu_active);"
            then:
              - delay: 1s
              - lambda: "id(menu_active) = false; id(main_menu).hide();"
              - lambda: id(page) = 90;  
              - delay: 2s 
              - lambda: "id(menu_active) = true; id(main_menu).show();"  
              - script.execute: menu_hide 
            else:  
              - delay: 1s
              - lambda: |
                  id(page) = 90;         
        - delay: 5s    
        - script.execute: update_page 
        - delay: 24h
        - switch.turn_off: schedule_raindelay_24h_enabled
    turn_off_action: 
      then:        
        - light.turn_off: esp_light
        - script.execute: sound
        - if:
            condition:
              - lambda: "return id(menu_active);"
            then:
              - delay: 1s
              - lambda: "id(menu_active) = false; id(main_menu).hide();"
              - lambda: id(page) = 89;  
              - delay: 2s 
              - lambda: "id(menu_active) = true; id(main_menu).show();"  
              - script.execute: menu_hide 
            else:  
              - delay: 1s
              - lambda: |
                  id(page) = 89;        
        - delay: 5s                   
        - script.execute: update_page

  - platform: template
    id: schedule_raindelay_48h_enabled
    name: "Enable 48h Rain Delay"
    icon: "mdi:weather-cloudy-clock"
    restore_mode: DISABLED
    web_server:
      sorting_group_id: rain_delay       
    optimistic: true
    turn_on_action:
      then:      
        - script.execute: sound
        - switch.turn_off: schedule_raindelay_24h_enabled
        - sprinkler.shutdown: garden
        - sprinkler.shutdown: golden_smaragd
        - sprinkler.shutdown: lawn
        - sprinkler.shutdown: bushes
        - delay: 1s
        - light.turn_on:
            id: esp_light
            effect: "Slow Pulse" 
            brightness: 100%
        - if:
            condition:
              - switch.is_on: schedule_raindelay_24h_enabled
            then: 
              - switch.turn_off: schedule_raindelay_24h_enabled
        - if:
            condition:
              - lambda: "return id(menu_active);"
            then:
              - delay: 1s
              - lambda: "id(menu_active) = false; id(main_menu).hide();"
              - lambda: id(page) = 92;  
              - delay: 2s 
              - lambda: "id(menu_active) = true; id(main_menu).show();"  
              - script.execute: menu_hide 
            else:  
              - delay: 1s
              - lambda: |
                  id(page) = 92;          
        - delay: 5s    
        - script.execute: update_page 
        - delay: 48h
        - switch.turn_off: schedule_raindelay_48h_enabled
    turn_off_action: 
      then:     
        - light.turn_off: esp_light  
        - script.execute: sound
        - if:
            condition:
              - lambda: "return id(menu_active);"
            then:
              - delay: 1s
              - lambda: "id(menu_active) = false; id(main_menu).hide();"
              - lambda: id(page) = 91;  
              - delay: 2s 
              - lambda: "id(menu_active) = true; id(main_menu).show();"  
              - script.execute: menu_hide 
            else:  
              - delay: 1s
              - lambda: |
                  id(page) = 91;        
        - delay: 5s                   
        - script.execute: update_page 

###########################################################

light:

  - platform: monochromatic
    output: backlight
    id: backlight_light
    default_transition_length: 1s
    restore_mode: RESTORE_DEFAULT_OFF   #RESTORE_DEFAULT_ON
    on_state:
      - delay: 1s
      - script.execute: update_brightness
    on_turn_on:
      - delay: 1s
      - script.execute: update_brightness
    on_turn_off:
      - if:
          condition:
            lambda: 'return id(backlight_brightness).state != 0;'
          then:
            - delay: 1s
            - sensor.template.publish:
                id: backlight_brightness
                state: 0
  
  - platform: esp32_rmt_led_strip
    id: esp_light  
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    icon: "mdi:wall-sconce-flat-variant"
    name: "ESP Light"
    effects:
      - pulse:
          transition_length: 550ms
          update_interval: 550ms
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.2s
          update_interval: 0.2s
          min_brightness: 0%
          max_brightness: 100%
      - lambda:
          name: "Slow Pulse"
          update_interval: 2s
          lambda: |-
            static int state = 0;
            static float saved_bri = 0.0;
            if (state == 0) {
              saved_bri = id(esp_light).current_values.get_brightness();
            }
            auto call = id(esp_light).turn_on();
            call.set_transition_length(500); 
            if (state == 0) {
              call.set_rgb(0.0, 0.0, 100.0);  
            } else if (state == 1) {
              call.set_rgb(100.0, 100.0, 0.0); 
            }
            call.set_brightness(saved_bri);
            call.perform();
            state += 1;
            if (state == 2) state = 0; 
    web_server:
      sorting_group_id: light_settings

###########################################################

number: #

###########################################################

  - platform: template
    name: "LCD Backlight Brightness"
    icon: "mdi:brightness-7"
    id: lcd_backlight_brightness
    restore_value: true
    min_value: 0
    max_value: 100
    step: 10
    optimistic: true
    update_interval: 0s
    web_server:
      sorting_group_id: light_settings
    set_action:
      - lambda: |-
          auto call = id(backlight_light).turn_on();
          call.set_brightness(x / 100.0);
          call.perform();

###########################################################


  - platform: template
    name: "Bches Multiplier"
    id: bushes_multiplier
    optimistic: true
    min_value: 0.1
    max_value: 2.0
    step: 0.1
    unit_of_measurement: "x"
    initial_value: 1.0
    restore_value: true
    update_interval: 0s
    mode: slider
    icon: "mdi:close"
    web_server:
      sorting_group_id: bushes_grup
    on_value:
      then:
        - sprinkler.set_multiplier:
            id: bushes
            multiplier: !lambda 'return id(bushes_multiplier).state;'
        - component.update: bushes_s1_time
        - component.update: bushes_s2_time
        - component.update: bushes_s3_time

  - platform: template
    name: "Bushes Schedule 1 Start Hour"
    icon: "mdi:hours-24"
    id: bushes_s1t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: bushes_grup
      sorting_weight: 4
    on_value:
      then:
        - component.update: bushes_s1_time
  
  - platform: template
    name: "Bushes Schedule 1 Start Minute"
    icon: "mdi:hours-24"
    id: bushes_s1t_minute
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: bushes_grup 
      sorting_weight: 5
    on_value:
      then:
        - component.update: bushes_s1_time
  
  - platform: template
    name: "Bushes Schedule 2 Start Hour"
    icon: "mdi:hours-24"
    id: bushes_s2t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: bushes_grup  
      sorting_weight: 6  
    on_value:
      then:
        - component.update: bushes_s2_time 
  
  - platform: template
    name: "Bushes Schedule 2 Start Minute"
    id: bushes_s2t_minute
    icon: "mdi:hours-24"
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: bushes_grup 
      sorting_weight: 7
    on_value:
      then:
        - component.update: bushes_s2_time
  
  - platform: template
    name: "Bushes Schedule 3 Start Hour"
    icon: "mdi:hours-24"
    id: bushes_s3t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: bushes_grup   
      sorting_weight: 8  
    on_value:
      then:
        - component.update: bushes_s3_time
  
  - platform: template
    name: "Bushes Schedule 3 Start Minute"
    icon: "mdi:hours-24"
    id: bushes_s3t_minute
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: bushes_grup 
      sorting_weight: 9
    on_value:
      then:
        - component.update: bushes_s3_time

###########################################################


  - platform: template
    name: "Lawn Multiplier"
    id: lawn_multiplier
    optimistic: true
    min_value: 0.1
    max_value: 2.0
    step: 0.1
    icon: "mdi:close"
    unit_of_measurement: "x"
    initial_value: 1.0
    restore_value: true
    update_interval: 0s
    mode: slider  
    web_server:
      sorting_group_id: lawn_grup 
    on_value:
      then:
        - sprinkler.set_multiplier:
            id: lawn
            multiplier: !lambda 'return id(lawn_multiplier).state;'
        - component.update: lawn_s1_time
        - component.update: lawn_s2_time
        - component.update: lawn_s3_time

  - platform: template
    name: "Lawn Schedule 1 Start Hour"
    icon: "mdi:hours-24"
    id: lawn_s1t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: lawn_grup  
      sorting_weight: 4
    on_value:
      then:
        - component.update: lawn_s1_time
  
  - platform: template
    name: "Lawn Schedule 1 Start Minute"
    icon: "mdi:hours-24"
    id: lawn_s1t_minute
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: lawn_grup 
      sorting_weight: 5
    on_value:
      then:
        - component.update: lawn_s1_time
  
  - platform: template
    name: "Lawn Schedule 2 Start Hour"
    icon: "mdi:hours-24"
    id: lawn_s2t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: lawn_grup     
      sorting_weight: 6
    on_value:
      then:
        - component.update: lawn_s2_time
  
  - platform: template
    name: "Lawn Schedule 2 Start Minute"
    id: lawn_s2t_minute
    icon: "mdi:hours-24"
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: lawn_grup 
      sorting_weight: 7
    on_value:
      then:
        - component.update: lawn_s2_time
  
  - platform: template
    name: "Lawn Schedule 3 Start Hour"
    icon: "mdi:hours-24"
    id: lawn_s3t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: lawn_grup     
      sorting_weight: 8
    on_value:
      then:
        - component.update: lawn_s3_time
  
  - platform: template
    name: "Lawn Schedule 3 Start Minute"
    icon: "mdi:hours-24"
    id: lawn_s3t_minute
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: lawn_grup 
      sorting_weight: 9
    on_value:
      then:
        - component.update: lawn_s3_time

###########################################################

  - platform: template
    name: "Garden Multiplier"
    id: garden_multiplier
    optimistic: true
    min_value: 0.1
    max_value: 2.0
    step: 0.1
    unit_of_measurement: "x"
    initial_value: 1.0
    restore_value: true
    update_interval: 0s
    mode: slider  
    icon: "mdi:close"
    web_server:
      sorting_group_id: garden_grup
      #sorting_weight: 4 
    on_value:
      then:
        - sprinkler.set_multiplier:
            id: garden
            multiplier: !lambda 'return id(garden_multiplier).state;'
        - component.update: garden_s1_time
        - component.update: garden_s2_time
        - component.update: garden_s3_time

  - platform: template
    name: "Garden Schedule 1 Start Hour"
    icon: "mdi:hours-24"
    id: garden_s1t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: garden_grup
      sorting_weight: 4  
    on_value:
      then:
        - component.update: garden_s1_time
        
  - platform: template
    name: "Garden Schedule 1 Start Minute"
    icon: "mdi:hours-24"
    id: garden_s1t_minute
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: garden_grup 
      sorting_weight: 5
    on_value:
      then:
        - component.update: garden_s1_time
  
  - platform: template
    name: "Garden Schedule 2 Start Hour"
    icon: "mdi:hours-24"
    id: garden_s2t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: garden_grup     
      sorting_weight: 6
    on_value:
      then:
        - component.update: garden_s2_time
  
  - platform: template
    name: "Garden Schedule 2 Start Minute"
    id: garden_s2t_minute
    icon: "mdi:hours-24"
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: garden_grup 
      sorting_weight: 7
    on_value:
      then:
        - component.update: garden_s2_time
  
  - platform: template
    name: "Garden Schedule 3 Start Hour"
    icon: "mdi:hours-24"
    id: garden_s3t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: garden_grup  
      sorting_weight: 8   
    on_value:
      then:
        - component.update: garden_s3_time
  
  - platform: template
    name: "Garden Schedule 3 Start Minute"
    icon: "mdi:hours-24"
    id: garden_s3t_minute
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: garden_grup 
      sorting_weight: 9
    on_value:
      then:
        - component.update: garden_s3_time

###########################################################

  - platform: template
    name: "Smaragd Schedule Multiplier"
    id: smaragd_multiplier
    optimistic: True
    min_value: 0.1
    max_value: 2.0
    step: 0.1
    initial_value: 1.0
    restore_value: true
    update_interval: 0s
    icon: "mdi:close"
    on_value:
      then:
        - sprinkler.set_multiplier:
            id: golden_smaragd
            multiplier: !lambda 'return id(smaragd_multiplier).state;'
        - component.update: smaragd_s1_time
        - component.update: smaragd_s2_time
        - component.update: smaragd_s3_time
    web_server:
      sorting_group_id: smaragd_grup  

  - platform: template
    name: "Smaragd Schedule 1 Start Hour"
    icon: "mdi:hours-24"
    id: smaragd_s1t_hour
    min_value: 0
    #initial_value: 22
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: smaragd_grup  
      sorting_weight: 4
    on_value:
      then: 
        - component.update: smaragd_s1_time
    
  - platform: template
    name: "Smaragd Schedule 1 Start Minute"
    icon: "mdi:hours-24"
    id: smaragd_s1t_minute
    #initial_value: 59
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: smaragd_grup 
      sorting_weight: 5
    on_value:
      then: 
        - component.update: smaragd_s1_time
  
  - platform: template
    name: "Smaragd Schedule 2 Start Hour"
    icon: "mdi:hours-24"
    id: smaragd_s2t_hour
    #initial_value: 5
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 6  
    on_value:
      then: 
        - component.update: smaragd_s2_time   
  
  - platform: template
    name: "Smaragd Schedule 2 Start Minute"
    id: smaragd_s2t_minute
    icon: "mdi:hours-24"
    #initial_value: 0
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 7 
    on_value:
      then: 
        - component.update: smaragd_s2_time   
  
  - platform: template
    name: "Smaragd Schedule 3 Start Hour"
    icon: "mdi:hours-24"
    id: smaragd_s3t_hour
    min_value: 0
    max_value: 23
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: smaragd_grup
      sorting_weight: 8   
    on_value:
      then: 
        - component.update: smaragd_s3_time     
  
  - platform: template
    name: "Smaragd Schedule 3 Start Minute"
    icon: "mdi:hours-24"
    id: smaragd_s3t_minute
    min_value: 0
    max_value: 59
    step: 1
    optimistic: true
    restore_value: true
    update_interval: 0s
    mode: BOX
    web_server:
      sorting_group_id: smaragd_grup 
      sorting_weight:  9
    on_value:
      then: 
        - component.update: smaragd_s3_time    

 ###########################################################
  
  - platform: template
    name: "Year Select"
    icon: "mdi:hours-24"
    id: year_select
    mode: BOX
    min_value: 2025
    max_value: 2040
    step: 1
    initial_value: 2025
    unit_of_measurement: "Year"
    update_interval: 0s
    web_server:
      sorting_group_id: time_settings
    optimistic: true   

  - platform: template
    name: "Month Select"
    icon: "mdi:hours-24"
    id: month_select
    mode: BOX
    min_value: 1
    max_value: 12
    step: 1
    initial_value: 1
    unit_of_measurement: "Month"
    update_interval: 0s
    web_server:
      sorting_group_id: time_settings
    optimistic: true   

  - platform: template
    name: "Day Select"
    icon: "mdi:hours-24"
    id: day_select
    mode: BOX
    min_value: 1
    max_value: 31
    step: 1
    initial_value: 1
    unit_of_measurement: "Day"
    update_interval: 0s
    web_server:
      sorting_group_id: time_settings
    optimistic: true   

  - platform: template
    name: "Hours Select"
    icon: "mdi:hours-24"
    id: hours_select
    mode: BOX
    min_value: 0
    max_value: 23
    step: 1
    initial_value: 0
    unit_of_measurement: "Hours"
    update_interval: 0s
    web_server:
      sorting_group_id: time_settings
    optimistic: true   

  - platform: template
    name: "Minutes Select"
    icon: "mdi:hours-24"
    id: minutes_select
    mode: BOX
    min_value: 0
    max_value: 59
    step: 1
    initial_value: 0
    unit_of_measurement: "Minutes"
    update_interval: 0s
    web_server:
      sorting_group_id: time_settings
    optimistic: true   

###########################################################

text_sensor:
  
###########################################################

  - platform: template
    name: "Garden Days Status"
    id: garden_days_status
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_garden
      sorting_weight: 0
    lambda: |-
      std::string status = "";
      if (id(garden_monday).state) status += "Mon ";
      if (id(garden_tuesday).state) status += "Tue ";
      if (id(garden_wednesday).state) status += "Wed ";
      if (id(garden_thursday).state) status += "Thu ";
      if (id(garden_friday).state) status += "Fri ";
      if (id(garden_saturday).state) status += "Sat ";
      if (id(garden_sunday).state) status += "Sun ";
      if (!status.empty()) {
        status.pop_back();
        return status;
      }
      return std::string("No days");

###################################################################

  - platform: template
    name: "Garden Schedule 1 Time"
    id: garden_s1_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_garden

    lambda: |-
      if (id(garden_schedule1_enabled).state) {
        int start_hour = id(garden_s1t_hour).state;
        int start_minute = id(garden_s1t_minute).state;

        int base_duration = id(garden_duration).state;
        float multiplier = id(garden_multiplier).state;
        int scaled_duration = int(base_duration * multiplier + 0.5);  // округление

        int end_minute = (start_minute + scaled_duration) % 60;
        int end_hour = (start_hour + (start_minute + scaled_duration) / 60) % 24;

        std::string result = to_string(start_hour) + ":" + (start_minute < 10 ? "0" : "") + to_string(start_minute);
        result += " - " + to_string(end_hour) + ":" + (end_minute < 10 ? "0" : "") + to_string(end_minute);

        return {result};
      } else {
        return {"OFF"};
      }

  - platform: template
    name: "Garden Schedule 2 Time"
    id: garden_s2_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_garden
    lambda: |-
      if (id(garden_schedule2_enabled).state) {
        int start_hour = id(garden_s2t_hour).state;
        int start_minute = id(garden_s2t_minute).state;

        int base_duration = id(garden_duration).state;
        float multiplier = id(garden_multiplier).state;
        int scaled_duration = int(base_duration * multiplier + 0.5);  // округление

        int end_minute = (start_minute + scaled_duration) % 60;
        int end_hour = (start_hour + (start_minute + scaled_duration) / 60) % 24;

        std::string result = to_string(start_hour) + ":" + (start_minute < 10 ? "0" : "") + to_string(start_minute);
        result += " - " + to_string(end_hour) + ":" + (end_minute < 10 ? "0" : "") + to_string(end_minute);

        return {result};
      } else {
        return {"OFF"};
      }

  - platform: template
    name: "Garden Schedule 3 Time"
    id: garden_s3_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_garden
    lambda: |-
      if (id(garden_schedule3_enabled).state) {
        int start_hour = id(garden_s3t_hour).state;
        int start_minute = id(garden_s3t_minute).state;

        int base_duration = id(garden_duration).state;
        float multiplier = id(garden_multiplier).state;
        int scaled_duration = int(base_duration * multiplier + 0.5);  // округление

        int end_minute = (start_minute + scaled_duration) % 60;
        int end_hour = (start_hour + (start_minute + scaled_duration) / 60) % 24;

        std::string result = to_string(start_hour) + ":" + (start_minute < 10 ? "0" : "") + to_string(start_minute);
        result += " - " + to_string(end_hour) + ":" + (end_minute < 10 ? "0" : "") + to_string(end_minute);

        return {result};
      } else {
        return {"OFF"};
      }

###########################################################

  - platform: template
    name: "Bushes Days Status"
    id: bushes_days_status
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_bushes
      sorting_weight: 0
    lambda: |-
      std::string status = "";
      if (id(bushes_monday).state) status += "Mon ";
      if (id(bushes_tuesday).state) status += "Tue ";
      if (id(bushes_wednesday).state) status += "Wed ";
      if (id(bushes_thursday).state) status += "Thu ";
      if (id(bushes_friday).state) status += "Fri ";
      if (id(bushes_saturday).state) status += "Sat ";
      if (id(bushes_sunday).state) status += "Sun ";
      if (!status.empty()) {
        status.pop_back();
        return status;
      }
      return std::string("No days");

  - platform: template
    name: "Bushes Schedule 1 Time"
    id: bushes_s1_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_bushes 
      sorting_weight: 2
    lambda: |-
      if (!id(bushes_schedule1_enabled).state) return {"OFF"};
      int start_hour = id(bushes_s1t_hour).state;
      int start_minute = id(bushes_s1t_minute).state;
      int duration = id(bushes_1_run_duration).state + id(bushes_2_run_duration).state;
      int repeat_count = id(bushes_repeat_count).state;
      float multiplier = id(bushes_multiplier).state;
      int total_duration = static_cast<int>((repeat_count + 1) * duration * multiplier + 0.5f);
      int end_minute = (start_minute + total_duration) % 60;
      int end_hour = (start_hour + (start_minute + total_duration) / 60) % 24;
      char result[16];
      snprintf(result, sizeof(result), "%02d:%02d - %02d:%02d", start_hour, start_minute, end_hour, end_minute);
      return {result};

  - platform: template
    name: "Bushes Schedule 2 Time"
    id: bushes_s2_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_bushes 
      sorting_weight: 3
    lambda: |-
      if (!id(bushes_schedule2_enabled).state) return {"OFF"};
      int start_hour = id(bushes_s2t_hour).state;
      int start_minute = id(bushes_s2t_minute).state;
      int duration = id(bushes_1_run_duration).state + id(bushes_2_run_duration).state;
      int repeat_count = id(bushes_repeat_count).state;
      float multiplier = id(bushes_multiplier).state;
      int total_duration = static_cast<int>((repeat_count + 1) * duration * multiplier + 0.5f);
      int end_minute = (start_minute + total_duration) % 60;
      int end_hour = (start_hour + (start_minute + total_duration) / 60) % 24;
      char result[16];
      snprintf(result, sizeof(result), "%02d:%02d - %02d:%02d", start_hour, start_minute, end_hour, end_minute);
      return {result};

  - platform: template
    name: "Bushes Schedule 3 Time"
    id: bushes_s3_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_bushes 
      sorting_weight: 4
    lambda: |-
      if (!id(bushes_schedule3_enabled).state) return {"OFF"};
      int start_hour = id(bushes_s3t_hour).state;
      int start_minute = id(bushes_s3t_minute).state;
      int duration = id(bushes_1_run_duration).state + id(bushes_2_run_duration).state;
      int repeat_count = id(bushes_repeat_count).state;
      float multiplier = id(bushes_multiplier).state;
      int total_duration = static_cast<int>((repeat_count + 1) * duration * multiplier + 0.5f);
      int end_minute = (start_minute + total_duration) % 60;
      int end_hour = (start_hour + (start_minute + total_duration) / 60) % 24;
      char result[16];
      snprintf(result, sizeof(result), "%02d:%02d - %02d:%02d", start_hour, start_minute, end_hour, end_minute);
      return {result};

###########################################################

  - platform: template
    name: "Smaragd Days Status"
    id: smaragd_days_status
    icon: mdi:home-assistant
    update_interval: never
    web_server:
      sorting_group_id: ha_info_golden_smaragd
      sorting_weight: 1
    lambda: |-
      std::string status = "";
      if (id(smaragd_monday).state) status += "Mon ";
      if (id(smaragd_tuesday).state) status += "Tue ";
      if (id(smaragd_wednesday).state) status += "Wed ";
      if (id(smaragd_thursday).state) status += "Thu ";
      if (id(smaragd_friday).state) status += "Fri ";
      if (id(smaragd_saturday).state) status += "Sat ";
      if (id(smaragd_sunday).state) status += "Sun ";
      if (!status.empty()) {
        status.pop_back();
        return status;
      }
      return std::string("No days");

  - platform: template
    name: "Smaragd Schedule 1 Time"
    id: smaragd_s1_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_golden_smaragd
      sorting_weight: 2
    lambda: |-
      if (id(smaragd_schedule1_enabled).state) {
        int start_hour = id(smaragd_s1t_hour).state;
        int start_minute = id(smaragd_s1t_minute).state;
        int base_duration = id(smaragd_1_run_duration).state + id(smaragd_2_run_duration).state;
        int repeat_count = id(smaragd_repeat_count).state;
        float multiplier = id(smaragd_multiplier).state;
        int total_duration = static_cast<int>((repeat_count + 1) * base_duration * multiplier + 0.5f);

        int end_minute = (start_minute + total_duration) % 60;
        int end_hour = (start_hour + (start_minute + total_duration) / 60) % 24;

        char buffer[20];
        snprintf(buffer, sizeof(buffer), "%02d:%02d - %02d:%02d", start_hour, start_minute, end_hour, end_minute);
        return std::string(buffer);
      } else {
        return {"OFF"};
      }

  - platform: template
    name: "Smaragd Schedule 2 Time"
    id: smaragd_s2_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_golden_smaragd
      sorting_weight: 3
    lambda: |-
      if (id(smaragd_schedule2_enabled).state) {
        int start_hour = id(smaragd_s2t_hour).state;
        int start_minute = id(smaragd_s2t_minute).state;
        int base_duration = id(smaragd_1_run_duration).state + id(smaragd_2_run_duration).state;
        int repeat_count = id(smaragd_repeat_count).state;
        float multiplier = id(smaragd_multiplier).state;
        int total_duration = static_cast<int>((repeat_count + 1) * base_duration * multiplier + 0.5f);

        int end_minute = (start_minute + total_duration) % 60;
        int end_hour = (start_hour + (start_minute + total_duration) / 60) % 24;

        char buffer[20];
        snprintf(buffer, sizeof(buffer), "%02d:%02d - %02d:%02d", start_hour, start_minute, end_hour, end_minute);
        return std::string(buffer);
      } else {
        return {"OFF"};
      }

  - platform: template
    name: "Smaragd Schedule 3 Time"
    id: smaragd_s3_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_golden_smaragd
      sorting_weight: 4
    lambda: |-
      if (id(smaragd_schedule3_enabled).state) {
        int start_hour = id(smaragd_s3t_hour).state;
        int start_minute = id(smaragd_s3t_minute).state;
        int base_duration = id(smaragd_1_run_duration).state + id(smaragd_2_run_duration).state;
        int repeat_count = id(smaragd_repeat_count).state;
        float multiplier = id(smaragd_multiplier).state;
        int total_duration = static_cast<int>((repeat_count + 1) * base_duration * multiplier + 0.5f);

        int end_minute = (start_minute + total_duration) % 60;
        int end_hour = (start_hour + (start_minute + total_duration) / 60) % 24;

        char buffer[20];
        snprintf(buffer, sizeof(buffer), "%02d:%02d - %02d:%02d", start_hour, start_minute, end_hour, end_minute);
        return std::string(buffer);
      } else {
        return {"OFF"};
      }

###########################################################

  - platform: template
    name: "Lawn Days Status"
    id: lawn_days_status
    icon: mdi:home-assistant
    update_interval: never
    web_server:
      sorting_group_id: ha_info_lawn
      sorting_weight: 0
    lambda: |-
      std::string status = "";
      if (id(lawn_monday).state) status += "Mon ";
      if (id(lawn_tuesday).state) status += "Tue ";
      if (id(lawn_wednesday).state) status += "Wed ";
      if (id(lawn_thursday).state) status += "Thu ";
      if (id(lawn_friday).state) status += "Fri ";
      if (id(lawn_saturday).state) status += "Sat ";
      if (id(lawn_sunday).state) status += "Sun ";
      if (!status.empty()) {
        status.pop_back();
        return status;
      }
      return std::string("No days");

  - platform: template
    name: "Lawn Schedule 1 Time"
    id: lawn_s1_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_lawn
      sorting_weight: 1
    lambda: |-
      if (!id(lawn_schedule1_enabled).state) {
        return std::string("OFF");
      }
      int start_hour = id(lawn_s1t_hour).state;
      int start_minute = id(lawn_s1t_minute).state;
      int duration = id(lawn_1_run_duration).state + id(lawn_2_run_duration).state + id(lawn_3_run_duration).state;
      int repeat_count = id(lawn_repeat_count).state;
      int total_duration = (repeat_count + 1) * duration;
      // Применение множителя
      total_duration *= id(lawn_multiplier).state;
      int end_minute = (start_minute + total_duration) % 60;
      int end_hour = (start_hour + (start_minute + total_duration) / 60) % 24;
      std::string result = to_string(start_hour) + ":" + (start_minute < 10 ? "0" : "") + to_string(start_minute);
      result += " - " + to_string(end_hour) + ":" + (end_minute < 10 ? "0" : "") + to_string(end_minute);
      return {result};

  - platform: template
    name: "Lawn Schedule 2 Time"
    id: lawn_s2_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_lawn
      sorting_weight: 2
    lambda: |-
      if (!id(lawn_schedule2_enabled).state) {
        return std::string("OFF");
      }
      int start_hour = id(lawn_s2t_hour).state;
      int start_minute = id(lawn_s2t_minute).state;
      int duration = id(lawn_1_run_duration).state + id(lawn_2_run_duration).state + id(lawn_3_run_duration).state;
      int repeat_count = id(lawn_repeat_count).state;
      int total_duration = (repeat_count + 1) * duration;
      // Применение множителя
      total_duration *= id(lawn_multiplier).state;
      int end_minute = (start_minute + total_duration) % 60;
      int end_hour = (start_hour + (start_minute + total_duration) / 60) % 24;
      std::string result = to_string(start_hour) + ":" + (start_minute < 10 ? "0" : "") + to_string(start_minute);
      result += " - " + to_string(end_hour) + ":" + (end_minute < 10 ? "0" : "") + to_string(end_minute);
      return {result};

  - platform: template
    name: "Lawn Schedule 3 Time"
    id: lawn_s3_time
    icon: "mdi:home-assistant"
    update_interval: never
    web_server:
      sorting_group_id: ha_info_lawn
      sorting_weight: 3
    lambda: |-
      if (!id(lawn_schedule3_enabled).state) {
        return std::string("OFF");
      }
      int start_hour = id(lawn_s3t_hour).state;
      int start_minute = id(lawn_s3t_minute).state;
      int duration = id(lawn_1_run_duration).state + id(lawn_2_run_duration).state + id(lawn_3_run_duration).state;
      int repeat_count = id(lawn_repeat_count).state;
      int total_duration = (repeat_count + 1) * duration;
      // Применение множителя
      total_duration *= id(lawn_multiplier).state;
      int end_minute = (start_minute + total_duration) % 60;
      int end_hour = (start_hour + (start_minute + total_duration) / 60) % 24;
      std::string result = to_string(start_hour) + ":" + (start_minute < 10 ? "0" : "") + to_string(start_minute);
      result += " - " + to_string(end_hour) + ":" + (end_minute < 10 ? "0" : "") + to_string(end_minute);
      return {result};

###########################################################

  - platform: template
    name: "Sprinkler Remaining Time Garden"
    id: sprinkler_remaining_time_garden
    icon: "mdi:home-assistant"
    update_interval: never
    lambda: |-
      return {"❌ No time zone running"};
    web_server:
      sorting_group_id: ha_info_garden

  - platform: template
    name: "Sprinkler Remaining Time Bushes"
    id: sprinkler_remaining_time_bushes
    icon: mdi:home-assistant
    update_interval: never
    lambda: |-
      return {"❌ No time zone running"};
    web_server:
      sorting_group_id: ha_info_bushes
      sorting_weight: 5

  - platform: template
    name: "Sprinkler Remaining Time (Lawn)"
    id: sprinkler_remaining_time_lawn
    icon: mdi:home-assistant
    update_interval: never
    lambda: |-
      return {"❌ No time zone running"};
    web_server:
      sorting_group_id: ha_info_lawn
      sorting_weight: 5

  - platform: template
    name: "Sprinkler Remaining Time (Golden Smaragd)"
    id: sprinkler_remaining_time_golden
    icon: mdi:home-assistant
    update_interval: never
    lambda: |-
      return {"❌ No time zone running"};
    web_server:
      sorting_group_id: ha_info_golden_smaragd
      sorting_weight: 5

###########################################################

  - platform: template
    name: "Current Time"
    id: current_time
    icon: mdi:clock-time-eight-outline
    web_server:
      sorting_group_id: time_settings
    lambda: |-
      auto time = id(rtc_time).now();
      return time.strftime("%Y-%m-%d / %H:%M");
    update_interval: 60s

  - platform: wifi_info
    ip_address:
      name: "IP"
      icon: "mdi:ip-network"
      id: esp_ip
      update_interval: 1min
      web_server:
        sorting_group_id: esp_settings
        sorting_weight: 7
    ssid:
      name: "SSID"
      icon: "mdi:rename-box-outline"
      id: esp_ssid
      update_interval: 1min
      web_server:
        sorting_group_id: esp_settings
        sorting_weight: 4
    mac_address:
      name: "Mac"
      id: mac
      icon: "mdi:folder-network-outline"
      web_server:
        sorting_group_id: esp_settings
        sorting_weight: 5
    bssid:
      name: "BSSID"
      icon: "mdi:folder-network"
      web_server:
        sorting_group_id: esp_settings
        sorting_weight: 6

  - platform: uptime
    name: "Uptime"
    id: formatted_uptime
    update_interval: 1min
    web_server:
      sorting_group_id: esp_settings
      sorting_weight: 10
    
###########################################################

binary_sensor:

###########################################################

  - platform: gpio    
    pin: 
      number: GPIO19
      mode: INPUT_PULLUP
      inverted: True
    name: "Menu Button"
    icon: "mdi:location-enter"
    web_server:
      sorting_group_id: button_menu
      sorting_weight: 1
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:    
          - script.execute: turn_on_backlight
          - script.execute: update_page
          - script.execute: sound
          - if:
              condition:
                lambda: 'return !id(menu_active);'
              then:
                - lambda: "id(menu_active) = true; id(main_menu).show();" 
                - script.execute: menu_hide
              else:
                - display_menu.enter  
                - script.execute: menu_hide
      - timing:
          - OFF for at least 3s 
          - ON for at least 5s
        then:
          - switch.toggle: general
          - script.execute: update_page
          - script.execute: sound

  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: True
    name: "Button DOWN"
    icon: "mdi:arrow-down-bold"
    web_server:
      sorting_group_id: button_menu
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - script.execute: turn_on_backlight
          - script.execute: sound
          - if:
              condition:
                lambda: "return id(menu_active);"
              then:
                - display_menu.down
                - script.execute: menu_hide
                - script.execute: update_page
              else: 
                - script.execute: increase_page
                
                - script.execute: update_page
      - timing:
          - OFF for at least 3s 
          - ON for at least 5s
        then:
          - switch.toggle: schedule_raindelay_24h_enabled
          - script.execute: update_page
          - script.execute: sound

  - platform: gpio
    pin:
      number: GPIO18
      mode: INPUT_PULLUP
      inverted: True
    name: "Button UP"
    icon: "mdi:arrow-up-bold"
    web_server:
      sorting_group_id: button_menu
    on_multi_click:                       
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - script.execute: turn_on_backlight
          - script.execute: sound
          - if:
              condition:
                lambda: "return id(menu_active);"
              then:
                - display_menu.up
                - script.execute: menu_hide 
                - script.execute: update_page
              else: 
                - script.execute: decrease_page
                
                - script.execute: update_page
      - timing:                           
          - ON for at most 0.5s  
          - OFF for at most 0.5s 
          - ON for at most 0.5s  
          - OFF for at most 0.5s 
          - ON for at least 5s   
        then: 
          - switch.toggle: wifi_onoff
          - if:
              condition:
                - switch.is_on: wifi_onoff
              then:              
                - logger.log: WiFi on!
                - lambda: id(page) = 87;
                - delay: 3s
                - script.execute: update_page
              else: 
                - logger.log: WiFi off!
                - lambda: id(page) = 88;   
                - delay: 3s
                - script.execute: update_page
      - timing:               
          - OFF for at least 3s              
          - ON for at least 5s
        then:
          - switch.toggle: schedule_raindelay_48h_enabled
          - script.execute: update_page
          - script.execute: sound

###########################################################

  - platform: status
    name: "Connection H/A"
    icon: "mdi:lan-connect"
    id: esp_status_sensor
    web_server:
      sorting_group_id: esp_settings
      sorting_weight: 8

###########################################################

  - platform: template
    id: sprinkler_valve_sw1_status
    name: "Smaragd Valve 1 Status"
    icon: "mdi:pipe-valve"
    lambda: |-
      return id(smaragd_valve1).state;
    web_server:
      sorting_group_id: ha_info_golden_smaragd
      sorting_weight: 6
  
  - platform: template
    id: sprinkler_valve_sw2_status
    icon: "mdi:pipe-valve"
    name: "Smaragd Valve 2 Status" 
    lambda: |-
      return id(smaragd_valve2).state;
    web_server:
      sorting_group_id: ha_info_golden_smaragd
      sorting_weight: 7
  
###########################################################

  - platform: template
    id: sprinkler_valve_sw3_status
    icon: "mdi:pipe-valve"
    name: "Lawn Valve 1 Status"
    lambda: |-
      return id(sprinkler_valve_sw3).state;
    web_server:
      sorting_group_id: ha_info_lawn
  
  - platform: template
    id: sprinkler_valve_sw4_status
    icon: "mdi:pipe-valve"
    name: "Lawn Valve 2 Status"
    lambda: |-
      return id(sprinkler_valve_sw4).state;
    web_server:
      sorting_group_id: ha_info_lawn

  - platform: template
    id: sprinkler_valve_sw5_status
    icon: "mdi:pipe-valve"
    name: "Lawn Valve 3 Status"
    lambda: |-
      return id(sprinkler_valve_sw5).state;
    web_server:
      sorting_group_id: ha_info_lawn
  
  - platform: template
    id: sprinkler_valve_sw6_status
    icon: "mdi:pipe-valve"
    name: "Bushes Valve 1 Status"
    lambda: |-
      return id(sprinkler_valve_sw6).state;
    web_server:
      sorting_group_id: ha_info_bushes

  - platform: template
    id: sprinkler_valve_sw7_status
    icon: "mdi:pipe-valve"
    name: "Bushes Valve 2 Status"
    lambda: |-
      return id(sprinkler_valve_sw7).state;
    web_server:
      sorting_group_id: ha_info_bushes
  
  - platform: template
    id: sprinkler_valve_sw8_status
    icon: "mdi:pipe-valve"
    name: "Garden Valve Status"
    lambda: |-
      return id(sprinkler_valve_sw8).state;
    web_server:
      sorting_group_id: ha_info_garden

###########################################################    

time:
  
  - platform: homeassistant        
    id: ha_time
    update_interval: 60s
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              if (id(smaragd_schedule1_enabled).state || id(smaragd_schedule2_enabled).state || id(smaragd_schedule3_enabled).state && !id(general).state) {
                id(golden_smaragd_script1).execute();
              }
          - lambda: |-
              if (id(garden_schedule1_enabled).state || id(garden_schedule2_enabled).state || id(garden_schedule3_enabled).state && !id(general).state) {
                id(garden_script1).execute();
              }  
          - lambda: |-
              if (id(lawn_schedule1_enabled).state || id(lawn_schedule2_enabled).state || id(lawn_schedule3_enabled).state && !id(general).state) {
                id(lawn_script1).execute();
              } 
          - lambda: |-
              if (id(bushes_schedule1_enabled).state || id(bushes_schedule2_enabled).state || id(bushes_schedule3_enabled).state && !id(general).state) {
                id(bushes_script1).execute();
              } 
    on_time_sync:
      then:
        - ds1307.write_time: 
            id: rtc_time
        - logger.log: Time synchronized ds1307

  - platform: ds1307
    id: rtc_time
    timezone: "unknown"
    i2c_id: bus_slow
    address: 0x68
    update_interval: never

###########################################################

sensor: 

###########################################################

  - platform: template
    name: "Free Heap"
    lambda: |-
      return heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
    unit_of_measurement: "bytes"
    update_interval: 10s
    web_server:
      sorting_group_id: esp_settings

  - platform: template
    name: "RAM"
    lambda: |-
      float total = heap_caps_get_total_size(MALLOC_CAP_INTERNAL);
      float free = heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
      return int(((total - free) / total) * 100);
    update_interval: 1min
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:memory"
    web_server:
      sorting_group_id: esp_settings
      sorting_weight: 15

  - platform: template
    name: "Flash"
    lambda: |-
      size_t total = spi_flash_get_chip_size();
      size_t used = total - ESP.getFreeSketchSpace();
      return int((used * 100) / total);
    update_interval: 60s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:memory"
    web_server:
      sorting_group_id: esp_settings
      sorting_weight: 16

  - platform: template
    id: backlight_brightness
    unit_of_measurement: "%"
    web_server:
      sorting_group_id: esp_settings

  - platform: wifi_signal 
    internal: True
    id: wifi_signal_db
    icon: "mdi:wifi"
    update_interval: 60s
    web_server:
      sorting_group_id: esp_settings
      
  - platform: copy 
    source_id: wifi_signal_db
    name: "WiFi Signal"
    id: wifi_percent
    icon: "mdi:wifi"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    web_server:
      sorting_group_id: esp_settings
      sorting_weight: 9
    
########################################################### 

script:

  - id: update_remaining_time_smaragd
    mode: restart
    then:
      - lambda: |-
          std::string new_remaining_time;
          if (id(golden_smaragd).time_remaining_active_valve().has_value()) {
            uint32_t remaining_time = id(golden_smaragd).time_remaining_active_valve().value();
            uint32_t hours = remaining_time / 3600;
            uint32_t minutes = (remaining_time % 3600) / 60;
            uint32_t seconds = remaining_time % 60;
            new_remaining_time = "⏳ " + to_string(hours) + ":" + 
                                 (minutes < 10 ? "0" : "") + to_string(minutes) + ":" + 
                                 (seconds < 10 ? "0" : "") + to_string(seconds);
            id(sprinkler_remaining_time_golden).publish_state(new_remaining_time);
          }
      - delay: 1s
      - script.execute: update_remaining_time_smaragd

  - id: update_remaining_time_lawn
    mode: restart
    then:
      - lambda: |-
          std::string new_remaining_time;
          if (id(lawn).time_remaining_active_valve().has_value()) {
            uint32_t remaining_time = id(lawn).time_remaining_active_valve().value();
            uint32_t hours = remaining_time / 3600;
            uint32_t minutes = (remaining_time % 3600) / 60;
            uint32_t seconds = remaining_time % 60;
            new_remaining_time = "⏳ " + to_string(hours) + ":" + 
                                 (minutes < 10 ? "0" : "") + to_string(minutes) + ":" + 
                                 (seconds < 10 ? "0" : "") + to_string(seconds);
            id(sprinkler_remaining_time_lawn).publish_state(new_remaining_time);
          }
      - delay: 1s
      - script.execute: update_remaining_time_lawn

  - id: update_remaining_time_garden
    mode: restart
    then:
      - lambda: |-
          std::string new_remaining_time;
          if (id(garden).time_remaining_active_valve().has_value()) {
            uint32_t remaining_time = id(garden).time_remaining_active_valve().value();
            uint32_t hours = remaining_time / 3600;
            uint32_t minutes = (remaining_time % 3600) / 60;
            uint32_t seconds = remaining_time % 60;
            new_remaining_time = "⏳ " + to_string(hours) + ":" + 
                                 (minutes < 10 ? "0" : "") + to_string(minutes) + ":" + 
                                 (seconds < 10 ? "0" : "") + to_string(seconds);
            id(sprinkler_remaining_time_garden).publish_state(new_remaining_time);
          }
      - delay: 1s
      - script.execute: update_remaining_time_garden

  - id: update_remaining_time_bushes
    mode: restart
    then:
      - lambda: |-
          std::string new_remaining_time;
          if (id(bushes).time_remaining_active_valve().has_value()) {
            uint32_t remaining_time = id(bushes).time_remaining_active_valve().value();
            uint32_t hours = remaining_time / 3600;
            uint32_t minutes = (remaining_time % 3600) / 60;
            uint32_t seconds = remaining_time % 60;
            new_remaining_time = "⏳ " + to_string(hours) + ":" + 
                                 (minutes < 10 ? "0" : "") + to_string(minutes) + ":" + 
                                 (seconds < 10 ? "0" : "") + to_string(seconds);
            id(sprinkler_remaining_time_bushes).publish_state(new_remaining_time);
          }
      - delay: 1s
      - script.execute: update_remaining_time_bushes

  - id: all_off
    then:
      - switch.turn_off: smaragd_ctrlr_main_switch
      - switch.turn_off: lawn_ctrlr_main_switch
      - switch.turn_off: sprinkler_valve_sw8
      - switch.turn_off: bushes_ctrlr_main_switch

  - id: valve_light_on
    then:
      - script.execute: update_page
      - light.turn_on:
          id: esp_light
          red: 0.0
          green: 1.0
          blue: 0.0
          brightness: 0.6
          effect: "Fast Pulse"

  - id: valve_light_off
    then:
      - script.execute: update_page
      - if:
          condition:
            - switch.is_off: smaragd_valve1
            - switch.is_off: smaragd_valve2
            - switch.is_off: sprinkler_valve_sw3
            - switch.is_off: sprinkler_valve_sw4
            - switch.is_off: sprinkler_valve_sw5
            - switch.is_off: sprinkler_valve_sw6
            - switch.is_off: sprinkler_valve_sw7
            - switch.is_off: sprinkler_valve_sw8
          then:
            - delay: 1s 
            - light.turn_off: esp_light

###########################################################  

  - id: set_time
    then:
      - lambda: |-
          setenv("TZ", "${timezone}", 1);  
          tzset();  

          struct tm time_info;
          time_info.tm_year = id(year_select).state - 1900;
          time_info.tm_mon = id(month_select).state - 1;
          time_info.tm_mday = id(day_select).state;
          time_info.tm_hour = id(hours_select).state;
          time_info.tm_min = id(minutes_select).state;
          time_info.tm_sec = 0;
          time_info.tm_isdst = -1;

          std::time_t t = mktime(&time_info);
          struct timeval tv = {t, 0};
          settimeofday(&tv, NULL);

          ESP_LOGD("main", "Time set to: %s", ctime(&t));
      - delay: 1s    
      - component.update: current_time
      - ds1307.write_time: 
          id: rtc_time
      - logger.log: Time synchronized ds1307
      - delay: 1s
      - ds1307.read_time: 
          id: rtc_time
      - logger.log: Time read by ds1307

###########################################################

  - id: sound
    then:
      - if:
          condition:
            - switch.is_on: sound_on_off
          then:
            - rtttl.play: "s:d=4,o=5,b=125:16p,16d7"

###########################################################

  - id: increase_page  ## down
    then:
      - lambda: |-
          int max_page = 10;
          int min_page = 2;
          bool any_active = id(smaragd_schedule1_enabled).state || 
                            id(smaragd_schedule2_enabled).state || 
                            id(smaragd_schedule3_enabled).state ||
                            id(lawn_schedule1_enabled).state || 
                            id(lawn_schedule2_enabled).state || 
                            id(lawn_schedule3_enabled).state ||
                            id(garden_schedule1_enabled).state || 
                            id(garden_schedule2_enabled).state || 
                            id(garden_schedule3_enabled).state ||
                            id(bushes_schedule1_enabled).state || 
                            id(bushes_schedule2_enabled).state || 
                            id(bushes_schedule3_enabled).state;
          bool page_10_enabled = id(smaragd_valve1).state || id(smaragd_valve2).state;
          bool page_9_enabled = id(sprinkler_valve_sw3).state || id(sprinkler_valve_sw4).state || id(sprinkler_valve_sw5).state;
          bool page_7_enabled = id(sprinkler_valve_sw6).state || id(sprinkler_valve_sw7).state;
          bool page_8_enabled = id(sprinkler_valve_sw8).state;
          if (id(page) < min_page || id(page) > max_page) {
            id(page) = min_page;
          } else {
            do {
              id(page) = id(page) + 1;
              if (id(page) > max_page) id(page) = min_page;
            } while (
              (id(page) == 3 && !(id(smaragd_schedule1_enabled).state || id(smaragd_schedule2_enabled).state || id(smaragd_schedule3_enabled).state)) ||
              (id(page) == 4 && !(id(lawn_schedule1_enabled).state || id(lawn_schedule2_enabled).state || id(lawn_schedule3_enabled).state)) ||
              (id(page) == 5 && !(id(garden_schedule1_enabled).state || id(garden_schedule2_enabled).state || id(garden_schedule3_enabled).state)) ||
              (id(page) == 6 && !(id(bushes_schedule1_enabled).state || id(bushes_schedule2_enabled).state || id(bushes_schedule3_enabled).state)) ||
              (id(page) == 7 && !page_7_enabled) ||
              (id(page) == 8 && !page_8_enabled) ||
              (id(page) == 9 && !page_9_enabled) ||
              (id(page) == 10 && !page_10_enabled)
            );
          }  
      - script.execute: update_page

  - id: decrease_page
    then:
      - lambda: |-
          int max_page = 10;  
          int min_page = 2;
          bool any_active = id(smaragd_schedule1_enabled).state || 
                            id(smaragd_schedule2_enabled).state || 
                            id(smaragd_schedule3_enabled).state ||
                            id(lawn_schedule1_enabled).state || 
                            id(lawn_schedule2_enabled).state || 
                            id(lawn_schedule3_enabled).state ||
                            id(garden_schedule1_enabled).state || 
                            id(garden_schedule2_enabled).state || 
                            id(garden_schedule3_enabled).state ||
                            id(bushes_schedule1_enabled).state || 
                            id(bushes_schedule2_enabled).state || 
                            id(bushes_schedule3_enabled).state;
          bool page_10_enabled = id(smaragd_valve1).state || id(smaragd_valve2).state;
          bool page_9_enabled = id(sprinkler_valve_sw3).state || id(sprinkler_valve_sw4).state || id(sprinkler_valve_sw5).state;
          bool page_7_enabled = id(sprinkler_valve_sw6).state || id(sprinkler_valve_sw7).state;
          bool page_8_enabled = id(sprinkler_valve_sw8).state;
          if (id(page) < min_page || id(page) > max_page) {
            id(page) = min_page;
          } else {
            do {
              id(page) = id(page) - 1;
              if (id(page) < min_page) id(page) = max_page;
            } while (
              (id(page) == 3 && !(id(smaragd_schedule1_enabled).state || id(smaragd_schedule2_enabled).state || id(smaragd_schedule3_enabled).state)) ||
              (id(page) == 4 && !(id(lawn_schedule1_enabled).state || id(lawn_schedule2_enabled).state || id(lawn_schedule3_enabled).state)) ||
              (id(page) == 5 && !(id(garden_schedule1_enabled).state || id(garden_schedule2_enabled).state || id(garden_schedule3_enabled).state)) ||
              (id(page) == 6 && !(id(bushes_schedule1_enabled).state || id(bushes_schedule2_enabled).state || id(bushes_schedule3_enabled).state)) ||
              (id(page) == 7 && !page_7_enabled) ||
              (id(page) == 8 && !page_8_enabled) ||
              (id(page) == 9 && !page_9_enabled) ||
              (id(page) == 10 && !page_10_enabled)
            );
          }   
      - script.execute: update_page  

###########################################################

  - id: bushes_script1 
    then:
      lambda: |-
        int dow = id(ha_time).now().day_of_week;
        if      ((dow == 1 && id(bushes_sunday).state == true)
        ||       (dow == 2 && id(bushes_monday).state == true)
        ||       (dow == 3 && id(bushes_tuesday).state == true)
        ||       (dow == 4 && id(bushes_wednesday).state == true)
        ||       (dow == 5 && id(bushes_thursday).state == true)
        ||       (dow == 6 && id(bushes_friday).state == true)
        ||       (dow == 7 && id(bushes_saturday).state == true)) {
          id(bushes_script2).execute();
        }
  
  - id: bushes_script2
    then:
      lambda: |-
        int hour = id(ha_time).now().hour;
        int minute = id(ha_time).now().minute;
        if      ((hour == int(id(bushes_s1t_hour).state) && minute == int(id(bushes_s1t_minute).state) && id(bushes_schedule1_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)
        ||      (hour == int(id(bushes_s2t_hour).state) && minute == int(id(bushes_s2t_minute).state) && id(bushes_schedule2_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)
        ||      (hour == int(id(bushes_s3t_hour).state) && minute == int(id(bushes_s3t_minute).state) && id(bushes_schedule3_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)) {
          id(bushes_script3).execute();
        }
  
  - id: bushes_script3
    then:
      - sprinkler.start_full_cycle: bushes

###########################################################

  - id: lawn_script1 
    then:
      lambda: |-
        int dow = id(ha_time).now().day_of_week;
        if      ((dow == 1 && id(lawn_sunday).state == true)
        ||       (dow == 2 && id(lawn_monday).state == true)
        ||       (dow == 3 && id(lawn_tuesday).state == true)
        ||       (dow == 4 && id(lawn_wednesday).state == true)
        ||       (dow == 5 && id(lawn_thursday).state == true)
        ||       (dow == 6 && id(lawn_friday).state == true)
        ||       (dow == 7 && id(lawn_saturday).state == true)) {
          id(lawn_script2).execute();
        }

  - id: lawn_script2
    then:
      lambda: |-
        int hour = id(ha_time).now().hour;
        int minute = id(ha_time).now().minute;
        if ((hour == int(id(lawn_s1t_hour).state) && minute == int(id(lawn_s1t_minute).state) && id(lawn_schedule1_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)
        ||  (hour == int(id(lawn_s2t_hour).state) && minute == int(id(lawn_s2t_minute).state) && id(lawn_schedule2_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)
        ||  (hour == int(id(lawn_s3t_hour).state) && minute == int(id(lawn_s3t_minute).state) && id(lawn_schedule3_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)) {
          id(lawn_script3).execute();
        }

  - id: lawn_script3
    then:
      - sprinkler.start_full_cycle: lawn

###########################################################

  - id: garden_script1 
    then:
      lambda: |-
        int dow = id(ha_time).now().day_of_week;
        if      ((dow == 1 && id(garden_sunday).state == true)
        ||       (dow == 2 && id(garden_monday).state == true)
        ||       (dow == 3 && id(garden_tuesday).state == true)
        ||       (dow == 4 && id(garden_wednesday).state == true)
        ||       (dow == 5 && id(garden_thursday).state == true)
        ||       (dow == 6 && id(garden_friday).state == true)
        ||       (dow == 7 && id(garden_saturday).state == true)) {
          id(garden_script2).execute();
        }

  - id: garden_script2
    then:
      lambda: |-
        int hour = id(ha_time).now().hour;
        int minute = id(ha_time).now().minute;
        if      ((hour == int(id(garden_s1t_hour).state) && minute == int(id(garden_s1t_minute).state) && id(garden_schedule1_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)
        ||      (hour == int(id(garden_s2t_hour).state) && minute == int(id(garden_s2t_minute).state) && id(garden_schedule2_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)
        ||      (hour == int(id(garden_s3t_hour).state) && minute == int(id(garden_s3t_minute).state) && id(garden_schedule3_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)) {
          id(garden_script3).execute();
        }
  
  - id: garden_script3
    then:
      - sprinkler.start_full_cycle: garden

###########################################################

  - id: golden_smaragd_script1 
    then:
      lambda: |-
        int dow = id(ha_time).now().day_of_week;
        if      ((dow == 1 && id(smaragd_sunday).state == true)
        ||       (dow == 2 && id(smaragd_monday).state == true)
        ||       (dow == 3 && id(smaragd_tuesday).state == true)
        ||       (dow == 4 && id(smaragd_wednesday).state == true)
        ||       (dow == 5 && id(smaragd_thursday).state == true)
        ||       (dow == 6 && id(smaragd_friday).state == true)
        ||       (dow == 7 && id(smaragd_saturday).state == true)) {
          id(golden_smaragd_script2).execute();
        }
 
  - id: golden_smaragd_script2
    then:
      lambda: |-
        int hour = id(ha_time).now().hour;
        int minute = id(ha_time).now().minute;
        if      ((hour == int(id(smaragd_s1t_hour).state) && minute == int(id(smaragd_s1t_minute).state) && id(smaragd_schedule1_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)
        ||      (hour == int(id(smaragd_s2t_hour).state) && minute == int(id(smaragd_s2t_minute).state) && id(smaragd_schedule2_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)
        ||      (hour == int(id(smaragd_s3t_hour).state) && minute == int(id(smaragd_s3t_minute).state) && id(smaragd_schedule3_enabled).state == true && id(schedule_raindelay_24h_enabled).state == false && id(schedule_raindelay_48h_enabled).state == false)) {
          id(golden_smaragd_script3).execute();
        }
    
  - id: golden_smaragd_script3
    then:
      - sprinkler.start_full_cycle: golden_smaragd

 ###########################################################  

  - id: update_brightness
    then:
      - lambda: |-
          auto new_brightness = int(id(backlight_light).current_values.get_brightness() * 100);
          if (id(backlight_brightness).state != new_brightness) {
            id(backlight_brightness).publish_state(new_brightness);
          }

###########################################################

  - id: turn_on_backlight
    mode: restart
    then:
      - if:
          condition:
            - switch.is_on: automatic_brightness
          then:
            - light.turn_on:
                id: backlight_light
                #brightness: 0.65
            - delay: 15s
            - if:
                condition:
                  - switch.is_on: automatic_brightness
                then:
                  - light.turn_off:
                      id: backlight_light

 ###########################################################

  - id: menu_hide
    mode: restart
    then:
      - if:
          condition:
            - lambda: "return id(menu_active);"
          then:
            - delay: 10s
            - display_menu.show_main
            - delay: 200ms
            - lambda: |-
                id(menu_active) = false;
            - delay: 100ms
            - script.execute: update_page

###########################################################

  - id: update_page
    mode: restart
    then:
      - delay: 5s
      - lambda: |
          bool general_enabled = id(general).state;  // Проверка состояния свитча general

          if (general_enabled) {
            id(page) = 100;  // Если general включен, страница 100
          } else {
            bool valve_active = id(smaragd_valve1).state || id(smaragd_valve2).state ||
                                id(sprinkler_valve_sw3).state || id(sprinkler_valve_sw4).state ||
                                id(sprinkler_valve_sw5).state || id(sprinkler_valve_sw6).state ||
                                id(sprinkler_valve_sw7).state || id(sprinkler_valve_sw8).state;
            bool schedule_active = id(smaragd_schedule1_enabled).state || 
                                   id(smaragd_schedule2_enabled).state || 
                                   id(smaragd_schedule3_enabled).state ||
                                   id(lawn_schedule1_enabled).state || 
                                   id(lawn_schedule2_enabled).state || 
                                   id(lawn_schedule3_enabled).state ||
                                   id(garden_schedule1_enabled).state || 
                                   id(garden_schedule2_enabled).state || 
                                   id(garden_schedule3_enabled).state ||
                                   id(bushes_schedule1_enabled).state || 
                                   id(bushes_schedule2_enabled).state || 
                                   id(bushes_schedule3_enabled).state;
            bool rain_delay_48h = id(schedule_raindelay_48h_enabled).state;
            bool rain_delay_24h = id(schedule_raindelay_24h_enabled).state;
            
            if (!valve_active && rain_delay_48h) {
              id(page) = 92;
            } else if (!valve_active && rain_delay_24h) {
              id(page) = 90;  
            } else if (valve_active && schedule_active) {
              id(page) = 93;
            } else if (schedule_active) {
              id(page) = 94;
            } else {
              id(page) = 99;  // Если ни одно из условий не выполнено, страница 99
            }
          }

 ###########################################################

button:

  - platform: template
    name: "Menu"
    icon: "mdi:dots-horizontal-circle-outline"
    web_server:
      sorting_group_id: button_menu
    on_press:
      - script.execute: turn_on_backlight 
      - script.execute: update_page 
      - script.execute: sound
      - if:
          condition:
            - lambda: "return id(menu_active);"
          then:
            - lambda: "id(menu_active) = false; id(main_menu).hide();"
          else:
            - lambda: "id(menu_active) = true; id(main_menu).show();"
            - script.execute: menu_hide

 ###########################################################   

  - platform: template
    name: "Enter"
    icon: "mdi:location-enter"
    web_server:
      sorting_group_id: button_menu
    on_press:
      - script.execute: turn_on_backlight 
      - script.execute: update_page
      - script.execute: sound
      - if:
          condition:
            lambda: "return id(menu_active);"
          then:
            - display_menu.enter
            - script.execute: menu_hide

########################################################### 

  - platform: template
    name: "MENU UP"
    icon: "mdi:arrow-up-bold"
    web_server:
      sorting_group_id: button_menu
    on_press:
      - script.execute: turn_on_backlight
      - script.execute: sound
      - if:
          condition:
            lambda: "return id(menu_active);"
          then:
            - display_menu.up
            - script.execute: menu_hide
          else: 
            - script.execute: decrease_page
      
      - script.execute: update_page

  - platform: template
    name: "MENU DOWN"
    icon: "mdi:arrow-down-bold"
    web_server:
      sorting_group_id: button_menu
    on_press:
      - script.execute: turn_on_backlight 
      - script.execute: sound
      - if:
          condition:
            lambda: "return id(menu_active);"
          then:
            - display_menu.down
            - script.execute: menu_hide 
          else: 
            - script.execute: increase_page
      - delay: 5s
      - script.execute: update_page
            
  - platform: restart
    name: "Restart"
    id: restart_btn
    web_server:
      sorting_group_id: esp_settings

  - platform: template
    name: "Set Manual Time"
    id: set_time_button
    icon: mdi:clock-time-six-outline
    web_server:
      sorting_group_id: time_settings
      sorting_weight: 7
    on_press:
      - script.execute: set_time

#######################################################################